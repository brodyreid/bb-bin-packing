!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("BinPacking",[],e):"object"==typeof exports?exports.BinPacking=e():t.BinPacking=e()}(this,(function(){return function(){var t={23:function(t){var e=function(){"use strict";function t(e,n,i,o){"object"==typeof n&&(i=n.depth,o=n.prototype,n.filter,n=n.circular);var c=[],s=[],u="undefined"!=typeof Buffer;return void 0===n&&(n=!0),void 0===i&&(i=1/0),function e(i,a){if(null===i)return null;if(0==a)return i;var f,h;if("object"!=typeof i)return i;if(t.__isArray(i))f=[];else if(t.__isRegExp(i))f=new RegExp(i.source,r(i)),i.lastIndex&&(f.lastIndex=i.lastIndex);else if(t.__isDate(i))f=new Date(i.getTime());else{if(u&&Buffer.isBuffer(i))return f=Buffer.allocUnsafe?Buffer.allocUnsafe(i.length):new Buffer(i.length),i.copy(f),f;void 0===o?(h=Object.getPrototypeOf(i),f=Object.create(h)):(f=Object.create(o),h=o)}if(n){var l=c.indexOf(i);if(-1!=l)return s[l];c.push(i),s.push(f)}for(var p in i){var y;h&&(y=Object.getOwnPropertyDescriptor(h,p)),y&&null==y.set||(f[p]=e(i[p],a-1))}return f}(e,i)}function e(t){return Object.prototype.toString.call(t)}function r(t){var e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),e}return t.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e},t.__objToStr=e,t.__isDate=function(t){return"object"==typeof t&&"[object Date]"===e(t)},t.__isArray=function(t){return"object"==typeof t&&"[object Array]"===e(t)},t.__isRegExp=function(t){return"object"==typeof t&&"[object RegExp]"===e(t)},t.__getRegExpFlags=r,t}();t.exports&&(t.exports=e)},426:function(t,e,r){!function(){"use strict";!function(){if("undefined"==typeof console)throw new Error("Weird, console object is undefined");if("function"!=typeof console.table||console.table!==l){var e=function(t,e){return typeof e===t}.bind(null,"string"),n=c.bind(null,e),i=c.bind(null,Array.isArray),o=r(185);t.exports.getTable=function(){var t=Array.prototype.slice.call(arguments),e="";return 2===t.length&&"string"==typeof t[0]&&Array.isArray(t[1])?f(t[0],t[1]):2===t.length&&n(t[0])&&i(t[1])?u(t[0],t[1],!0):(t.forEach((function(r,n){if("string"==typeof r)return e+=r,void(n!==t.length-1&&(e+="\n"));Array.isArray(r)?e+=s(r)+"\n":"object"==typeof r&&(e+=h(r))})),e)},console.table=l}function c(t,e){return Array.isArray(e)&&e.every(t)}function s(t){var e=new o;return t.forEach((function(t){"string"==typeof t||"number"==typeof t?e.cell("item",t):Object.keys(t).forEach((function(r){e.cell(r,t[r])})),e.newRow()})),e.toString()}function u(t,e,r){var n=new o;e.forEach((function(e){e.forEach((function(e,r){n.cell(t[r],e)})),n.newRow()}));var i=n.toString();return r?i:console.log(i)}function a(t,e){var r=s(e),n=r.indexOf("\n");if(n>0){t.length>n&&(n=t.length),console.log(t);var i,o="";for(i=0;i<n;i+=1)o+="-";console.log(o)}console.log(r)}function f(t,e){var r=s(e),n=r.indexOf("\n"),i="";if(n>0){t.length>n&&(n=t.length),i+=t+"\n";var o,c="";for(o=0;o<n;o+=1)c+="-";i+=c+"\n"}return i+r}function h(t){return s(function(t){return Object.keys(t).map((function(e){return{key:e,value:t[e]}}))}(t))}function l(){var t=Array.prototype.slice.call(arguments);return 2===t.length&&"string"==typeof t[0]&&Array.isArray(t[1])?a(t[0],t[1]):2===t.length&&n(t[0])&&i(t[1])?u(t[0],t[1]):void t.forEach((function(t){if("string"==typeof t)return console.log(t);Array.isArray(t)?console.log(s(t)):"object"==typeof t&&console.log(h(t))}))}}()}()},451:function(t,e,r){var n=r(23);t.exports=function(t,e){return t=t||{},Object.keys(e).forEach((function(r){void 0===t[r]&&(t[r]=n(e[r]))})),t}},185:function(t,e,r){var n;try{n=r(561)}catch(t){}function i(){this.rows=[],this.row={__printers:{}}}function o(t){return void 0===t?"":""+t}function c(t){var e=t.replace(/\u001b\[\d+m/g,"");return null==n?e.length:n(e)}function s(t){return function(e,r){var n=o(e),i=c(n);return(r>i?Array(r-i+1).join(t):"")+n}}t.exports=i,i.prototype.newRow=function(){return this.rows.push(this.row),this.row={__printers:{}},this},i.prototype.cell=function(t,e,r){return this.row[t]=e,this.row.__printers[t]=r||o,this},i.prototype.separator="  ",i.string=o,i.leftPadder=s;var u=i.padLeft=s(" ");function a(t){return function(e,r){var n=o(e),i=c(n);return n+(r>i?Array(r-i+1).join(t):"")}}i.rightPadder=a;var f=a(" ");function h(t,e){for(var r in t)"__printers"!=r&&e(r,t[r])}function l(t,e){return t===e?0:void 0===t?1:void 0===e?-1:null===t?1:null===e?-1:t>e?1:t<e?-1:l(String(t),String(e))}i.number=function(t){return function(e,r){if(null==e)return"";if("number"!=typeof e)throw new Error(e+" is not a number");var n=null==t?e+"":e.toFixed(t);return u(n,r)}},i.prototype.columns=function(){for(var t={},e=0;e<2;e++)this.rows.forEach((function(e){var r=0;h(e,(function(e){r=Math.max(r,t[e]||0),t[e]=r,r++}))}));return Object.keys(t).sort((function(e,r){return t[e]-t[r]}))},i.prototype.print=function(){var t=this.columns(),e=this.separator,r={},n="";return this.rows.forEach((function(t){h(t,(function(e,n){var i=t.__printers[e].call(t,n);r[e]=Math.max(c(i),r[e]||0)}))})),this.rows.forEach((function(i){var o="";t.forEach((function(t){var n=r[t],c=i.hasOwnProperty(t)?""+i.__printers[t].call(i,i[t],n):"";o+=f(c,n)+e})),o=o.slice(0,-e.length),n+=o+"\n"})),n},i.prototype.toString=function(){var t=this.columns(),e=new i;return e.separator=this.separator,t.forEach((function(t){e.cell(t,t)})),e.newRow(),e.pushDelimeter(t),e.rows=e.rows.concat(this.rows),this.totals&&this.rows.length&&(e.pushDelimeter(t),this.forEachTotal(e.cell.bind(e)),e.newRow()),e.print()},i.prototype.pushDelimeter=function(t){return(t=t||this.columns()).forEach((function(t){this.cell(t,void 0,s("-"))}),this),this.newRow()},i.prototype.forEachTotal=function(t){for(var e in this.totals){var r=this.totals[e],n=r.init,i=this.rows.length;this.rows.forEach((function(t,o){n=r.reduce.call(t,n,t[e],o,i)})),t(e,n,r.printer)}},i.prototype.printTransposed=function(t){t=t||{};var e=new i;return e.separator=t.separator||this.separator,this.columns().forEach((function(r){e.cell(0,r,t.namePrinter),this.rows.forEach((function(t,n){e.cell(n+1,t[r],t.__printers[r])})),e.newRow()}),this),e.print()},i.prototype.sort=function(t){if("function"==typeof t)return this.rows.sort(t),this;var e=(Array.isArray(t)?t:this.columns()).map((function(t){var e="asc",r=/(.*)\|\s*(asc|des)\s*$/.exec(t);return r&&(t=r[1],e=r[2]),function(r,n){return"asc"==e?l(r[t],n[t]):l(n[t],r[t])}}));return this.sort((function(t,r){for(var n=0;n<e.length;n++){var i=e[n](t,r);if(0!=i)return i}return 0}))},i.prototype.total=function(t,e){return e=e||{},this.totals=this.totals||{},this.totals[t]={reduce:e.reduce||i.aggr.sum,printer:e.printer||u,init:null==e.init?0:e.init},this},i.aggr={},i.aggr.printer=function(t,e){return e=e||o,function(r,n){return u(t+e(r),n)}},i.aggr.sum=function(t,e){return t+e},i.aggr.avg=function(t,e,r,n){return t+=e,r+1==n?t/n:t},i.print=function(t,e,r){var n=e||{};e="function"==typeof e?e:function(t,e){for(var r in t)if(t.hasOwnProperty(r)){var i=n[r]||{};e(i.name||r,t[r],i.printer)}};var o=new i,c=o.cell.bind(o);return Array.isArray(t)?(r=r||function(t){return t.toString()},t.forEach((function(t){e(t,c),o.newRow()}))):(r=r||function(t){return t.printTransposed({separator:" : "})},e(t,c),o.newRow()),r(o)},i.log=function(t,e,r){console.log(i.print(t,e,r))},i.prototype.log=function(){console.log(this.toString())}},653:function(t){t.exports=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]]},561:function(t,e,r){"use strict";var n=r(451),i=r(653),o={nul:0,control:0};function c(t,e){if("string"!=typeof t)return s(t,e);for(var r=0,n=0;n<t.length;n++){var i=s(t.charCodeAt(n),e);if(i<0)return-1;r+=i}return r}function s(t,e){return 0===t?e.nul:t<32||t>=127&&t<160?e.control:function(t){var e,r=0,n=i.length-1;if(t<i[0][0]||t>i[n][1])return!1;for(;n>=r;)if(e=Math.floor((r+n)/2),t>i[e][1])r=e+1;else{if(!(t<i[e][0]))return!0;n=e-1}return!1}(t)?0:1+(t>=4352&&(t<=4447||9001==t||9002==t||t>=11904&&t<=42191&&12351!=t||t>=44032&&t<=55203||t>=63744&&t<=64255||t>=65040&&t<=65049||t>=65072&&t<=65135||t>=65280&&t<=65376||t>=65504&&t<=65510||t>=131072&&t<=196605||t>=196608&&t<=262141))}t.exports=function(t){return c(t,o)},t.exports.config=function(t){return t=n(t||{},o),function(e){return c(e,t)}}}},e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.d=function(t,e){for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return function(){"use strict";r.r(n),r.d(n,{Bin:function(){return u},Box:function(){return c},Packer:function(){return l},heuristics:function(){return t}});var t={};r.r(t),r.d(t,{BestAreaFit:function(){return p},BestLongSideFit:function(){return y},BestShortSideFit:function(){return o},BottomLeft:function(){return g}});var e=function(){function t(e,r){this.score_1=t.MAX_INT,this.score_2=t.MAX_INT,void 0!==e&&(this.score_1=e),void 0!==r&&(this.score_2=r)}return t.prototype.valueOf=function(){return this.score_1+this.score_2},t.prototype.assign=function(t){this.score_1=t.score_1,this.score_2=t.score_2},t.prototype.isBlank=function(){return this.score_1===t.MAX_INT},t.prototype.decreaseBy=function(t){this.score_1+=t,this.score_2+=t},t.MAX_INT=Number.MAX_SAFE_INTEGER,t}(),i=function(){function t(){}return t.prototype.findPositionForNewNode=function(t,r){var n=this,i=new e,o=t.width,c=t.height;return r.forEach((function(e){n.tryPlaceRectIn(e,t,o,c,i),t.constrainRotation||n.tryPlaceRectIn(e,t,c,o,i)})),i},t.prototype.tryPlaceRectIn=function(t,e,r,n,i){if(t.width>=r&&t.height>=n){var o=this.calculateScore(t,r,n);o<i&&(e.x=t.x,e.y=t.y,e.width=r,e.height=n,e.packed=!0,i.assign(o))}},t.prototype.calculateScore=function(t,e,r){throw"NotImplementedError"},t}();class o extends i{calculateScore(t,r,n){let i=[Math.abs(t.width-r),Math.abs(t.height-n)].sort(((t,e)=>t-e));return new e(i[0],i[1])}}var c=function(t,e,r){void 0===r&&(r=!1),this.width=0,this.height=0,this.x=0,this.y=0,this.constrainRotation=!1,this.packed=!1,this.width=t,this.height=e,this.constrainRotation=r},s=function(){return(s=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},u=function(){function t(t,e,r){this.width=0,this.height=0,this.boxes=[],this.heuristic=null,this.freeRectangles=[],this.width=t,this.height=e,this.freeRectangles=[new a(t,e)],this.heuristic=r||new o}return Object.defineProperty(t.prototype,"area",{get:function(){return this.width*this.height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"efficiency",{get:function(){var t=0;return this.boxes.forEach((function(e){t+=e.width*e.height})),100*t/this.area},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"label",{get:function(){return"".concat(this.width,"x").concat(this.height," ").concat(this.efficiency,"%")},enumerable:!1,configurable:!0}),t.prototype.insert=function(t){if(t.packed)return!1;if(this.heuristic.findPositionForNewNode(t,this.freeRectangles),!t.packed)return!1;for(var e=this.freeRectangles.length,r=0;r<e;)this.splitFreeNode(this.freeRectangles[r],t)?(this.freeRectangles.splice(r,1),e--):r++;return this.pruneFreeList(),this.boxes.push(t),!0},t.prototype.scoreFor=function(t){var e=new c(t.width,t.height,t.constrainRotation);return this.heuristic.findPositionForNewNode(e,this.freeRectangles)},t.prototype.isLargerThan=function(t){return this.width>=t.width&&this.height>=t.height||this.height>=t.width&&this.width>=t.height},t.prototype.splitFreeNode=function(t,e){return!(e.x>=t.x+t.width||e.x+e.width<=t.x||e.y>=t.y+t.height||e.y+e.height<=t.y||(this.trySplitFreeNodeVertically(t,e),this.trySplitFreeNodeHorizontally(t,e),0))},t.prototype.trySplitFreeNodeVertically=function(t,e){e.x<t.x+t.width&&e.x+e.width>t.x&&(this.tryLeaveFreeSpaceAtTop(t,e),this.tryLeaveFreeSpaceAtBottom(t,e))},t.prototype.tryLeaveFreeSpaceAtTop=function(t,e){if(e.y>t.y&&e.y<t.y+t.height){var r=s({},t);r.height=e.y-r.y,this.freeRectangles.push(r)}},t.prototype.tryLeaveFreeSpaceAtBottom=function(t,e){if(e.y+e.height<t.y+t.height){var r=s({},t);r.y=e.y+e.height,r.height=t.y+t.height-(e.y+e.height),this.freeRectangles.push(r)}},t.prototype.trySplitFreeNodeHorizontally=function(t,e){e.y<t.y+t.height&&e.y+e.height>t.y&&(this.tryLeaveFreeSpaceOnLeft(t,e),this.tryLeaveFreeSpaceOnRight(t,e))},t.prototype.tryLeaveFreeSpaceOnLeft=function(t,e){if(e.x>t.x&&e.x<t.x+t.width){var r=s({},t);r.width=e.x-r.x,this.freeRectangles.push(r)}},t.prototype.tryLeaveFreeSpaceOnRight=function(t,e){if(e.x+e.width<t.x+t.width){var r=s({},t);r.x=e.x+e.width,r.width=t.x+t.width-(e.x+e.width),this.freeRectangles.push(r)}},t.prototype.pruneFreeList=function(){for(var t=0;t<this.freeRectangles.length;){var e=t+1;if(e===this.freeRectangles.length)break;for(;e<this.freeRectangles.length;){if(this.isContainedIn(this.freeRectangles[t],this.freeRectangles[e])){this.freeRectangles.splice(t,1),t--;break}this.isContainedIn(this.freeRectangles[e],this.freeRectangles[t])?this.freeRectangles.splice(e,1):e++,t++}}},t.prototype.isContainedIn=function(t,e){return t&&e&&t.x>=e.x&&t.y>=e.y&&t.x+t.width<=e.x+e.width&&t.y+t.height<=e.y+e.height},t}(),a=function(t,e){this.x=0,this.y=0,this.width=null,this.height=null,this.width=t,this.height=e},f=function(){function t(t,e){this.bin=t,this.box=e}return t.prototype.calculate=function(){return this.score=this.bin.scoreFor(this.box),this.score},t.prototype.fit=function(){return!this.score.isBlank()},t}(),h=function(){function t(t,e){var r=this;this.entries=[],t.forEach((function(t){r.addBinEntries(t,e)}))}return t.prototype.debug=function(){r(426),console.table(this.entries.map((function(t){return{bin:t.bin.label,score:t.score}})))},t.prototype.addBinEntries=function(t,e){var r=this;e.forEach((function(e){var n=new f(t,e);n.calculate(),r.entries.push(n)}))},t.prototype.largestNotFitingBox=function(){var t,e=this.entries.filter((function(t){return t.fit})).map((function(t){return t.box}));return this.entries.forEach((function(r){var n=t.box.width*t.box.height,i=r.box.width*r.box.height;e.includes(r.box)&&(null===t||n<i)&&(t=r)})),!!t.box&&t},t.prototype.bestFit=function(){for(var t=null,e=0;e<this.entries.length;e++){var r=this.entries[e];r.fit()&&(null===t||r.score<t.score)&&(t=r)}return t},t.prototype.removeBox=function(t){this.entries=this.entries.filter((function(e){return e.box!==t}))},t.prototype.addBin=function(t){this.addBinEntries(t,this.currentBoxes())},t.prototype.recalculateBin=function(t){this.entries.filter((function(e){return e.bin===t})).forEach((function(t){return t.calculate()}))},t.prototype.currentBoxes=function(){return function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))}([],function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),c=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)c.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return c}(new Set(this.entries.map((function(t){return t.box})))),!1)},t}(),l=function(){function t(t){this.bins=[],this.unpackedBoxes=[],this.bins=t}return t.prototype.pack=function(t){var r,n=[];if(0===(t=t.filter((function(t){return!t.packed}))).length)return n;for(var i=e.MAX_INT,o=new h(this.bins,t);(r=o.bestFit())&&(r.bin.insert(r.box),o.removeBox(r.box),o.recalculateBin(r.bin),n.push({box:r.box,score:r.score}),!(n.length>=i)););return this.unpackedBoxes=t.filter((function(t){return!t.packed})),n},t}();class p extends i{calculateScore(t,r,n){let i=t.width*t.height-r*n,o=Math.abs(t.width-r),c=Math.abs(t.height-n),s=Math.min(o,c);return new e(i,s)}}class y extends i{calculateScore(t,r,n){let i=[Math.abs(t.width-r),Math.abs(t.height-n)].sort(((t,e)=>t-e)).reverse();return new e(i[0],i[1])}}class g extends i{calculateScore(t,r,n){let i=t.y+n;return new e(i,t.x)}}}(),n}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,