!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("BinPacking",[],e):"object"==typeof exports?exports.BinPacking=e():t.BinPacking=e()}(this,(function(){return function(){var t={23:function(t){var e=function(){"use strict";function t(e,n,i,o){"object"==typeof n&&(i=n.depth,o=n.prototype,n.filter,n=n.circular);var c=[],s=[],u="undefined"!=typeof Buffer;return void 0===n&&(n=!0),void 0===i&&(i=1/0),function e(i,a){if(null===i)return null;if(0==a)return i;var f,h;if("object"!=typeof i)return i;if(t.__isArray(i))f=[];else if(t.__isRegExp(i))f=new RegExp(i.source,r(i)),i.lastIndex&&(f.lastIndex=i.lastIndex);else if(t.__isDate(i))f=new Date(i.getTime());else{if(u&&Buffer.isBuffer(i))return f=Buffer.allocUnsafe?Buffer.allocUnsafe(i.length):new Buffer(i.length),i.copy(f),f;void 0===o?(h=Object.getPrototypeOf(i),f=Object.create(h)):(f=Object.create(o),h=o)}if(n){var l=c.indexOf(i);if(-1!=l)return s[l];c.push(i),s.push(f)}for(var p in i){var y;h&&(y=Object.getOwnPropertyDescriptor(h,p)),y&&null==y.set||(f[p]=e(i[p],a-1))}return f}(e,i)}function e(t){return Object.prototype.toString.call(t)}function r(t){var e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),e}return t.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e},t.__objToStr=e,t.__isDate=function(t){return"object"==typeof t&&"[object Date]"===e(t)},t.__isArray=function(t){return"object"==typeof t&&"[object Array]"===e(t)},t.__isRegExp=function(t){return"object"==typeof t&&"[object RegExp]"===e(t)},t.__getRegExpFlags=r,t}();t.exports&&(t.exports=e)},426:function(t,e,r){!function(){"use strict";!function(){if("undefined"==typeof console)throw new Error("Weird, console object is undefined");if("function"!=typeof console.table||console.table!==l){var e=function(t,e){return typeof e===t}.bind(null,"string"),n=c.bind(null,e),i=c.bind(null,Array.isArray),o=r(185);t.exports.getTable=function(){var t=Array.prototype.slice.call(arguments),e="";return 2===t.length&&"string"==typeof t[0]&&Array.isArray(t[1])?f(t[0],t[1]):2===t.length&&n(t[0])&&i(t[1])?u(t[0],t[1],!0):(t.forEach((function(r,n){if("string"==typeof r)return e+=r,void(n!==t.length-1&&(e+="\n"));Array.isArray(r)?e+=s(r)+"\n":"object"==typeof r&&(e+=h(r))})),e)},console.table=l}function c(t,e){return Array.isArray(e)&&e.every(t)}function s(t){var e=new o;return t.forEach((function(t){"string"==typeof t||"number"==typeof t?e.cell("item",t):Object.keys(t).forEach((function(r){e.cell(r,t[r])})),e.newRow()})),e.toString()}function u(t,e,r){var n=new o;e.forEach((function(e){e.forEach((function(e,r){n.cell(t[r],e)})),n.newRow()}));var i=n.toString();return r?i:console.log(i)}function a(t,e){var r=s(e),n=r.indexOf("\n");if(n>0){t.length>n&&(n=t.length),console.log(t);var i,o="";for(i=0;i<n;i+=1)o+="-";console.log(o)}console.log(r)}function f(t,e){var r=s(e),n=r.indexOf("\n"),i="";if(n>0){t.length>n&&(n=t.length),i+=t+"\n";var o,c="";for(o=0;o<n;o+=1)c+="-";i+=c+"\n"}return i+r}function h(t){return s(function(t){return Object.keys(t).map((function(e){return{key:e,value:t[e]}}))}(t))}function l(){var t=Array.prototype.slice.call(arguments);return 2===t.length&&"string"==typeof t[0]&&Array.isArray(t[1])?a(t[0],t[1]):2===t.length&&n(t[0])&&i(t[1])?u(t[0],t[1]):void t.forEach((function(t){if("string"==typeof t)return console.log(t);Array.isArray(t)?console.log(s(t)):"object"==typeof t&&console.log(h(t))}))}}()}()},451:function(t,e,r){var n=r(23);t.exports=function(t,e){return t=t||{},Object.keys(e).forEach((function(r){void 0===t[r]&&(t[r]=n(e[r]))})),t}},185:function(t,e,r){var n;try{n=r(561)}catch(t){}function i(){this.rows=[],this.row={__printers:{}}}function o(t){return void 0===t?"":""+t}function c(t){var e=t.replace(/\u001b\[\d+m/g,"");return null==n?e.length:n(e)}function s(t){return function(e,r){var n=o(e),i=c(n);return(r>i?Array(r-i+1).join(t):"")+n}}t.exports=i,i.prototype.newRow=function(){return this.rows.push(this.row),this.row={__printers:{}},this},i.prototype.cell=function(t,e,r){return this.row[t]=e,this.row.__printers[t]=r||o,this},i.prototype.separator="  ",i.string=o,i.leftPadder=s;var u=i.padLeft=s(" ");function a(t){return function(e,r){var n=o(e),i=c(n);return n+(r>i?Array(r-i+1).join(t):"")}}i.rightPadder=a;var f=a(" ");function h(t,e){for(var r in t)"__printers"!=r&&e(r,t[r])}function l(t,e){return t===e?0:void 0===t?1:void 0===e?-1:null===t?1:null===e?-1:t>e?1:t<e?-1:l(String(t),String(e))}i.number=function(t){return function(e,r){if(null==e)return"";if("number"!=typeof e)throw new Error(e+" is not a number");var n=null==t?e+"":e.toFixed(t);return u(n,r)}},i.prototype.columns=function(){for(var t={},e=0;e<2;e++)this.rows.forEach((function(e){var r=0;h(e,(function(e){r=Math.max(r,t[e]||0),t[e]=r,r++}))}));return Object.keys(t).sort((function(e,r){return t[e]-t[r]}))},i.prototype.print=function(){var t=this.columns(),e=this.separator,r={},n="";return this.rows.forEach((function(t){h(t,(function(e,n){var i=t.__printers[e].call(t,n);r[e]=Math.max(c(i),r[e]||0)}))})),this.rows.forEach((function(i){var o="";t.forEach((function(t){var n=r[t],c=i.hasOwnProperty(t)?""+i.__printers[t].call(i,i[t],n):"";o+=f(c,n)+e})),o=o.slice(0,-e.length),n+=o+"\n"})),n},i.prototype.toString=function(){var t=this.columns(),e=new i;return e.separator=this.separator,t.forEach((function(t){e.cell(t,t)})),e.newRow(),e.pushDelimeter(t),e.rows=e.rows.concat(this.rows),this.totals&&this.rows.length&&(e.pushDelimeter(t),this.forEachTotal(e.cell.bind(e)),e.newRow()),e.print()},i.prototype.pushDelimeter=function(t){return(t=t||this.columns()).forEach((function(t){this.cell(t,void 0,s("-"))}),this),this.newRow()},i.prototype.forEachTotal=function(t){for(var e in this.totals){var r=this.totals[e],n=r.init,i=this.rows.length;this.rows.forEach((function(t,o){n=r.reduce.call(t,n,t[e],o,i)})),t(e,n,r.printer)}},i.prototype.printTransposed=function(t){t=t||{};var e=new i;return e.separator=t.separator||this.separator,this.columns().forEach((function(r){e.cell(0,r,t.namePrinter),this.rows.forEach((function(t,n){e.cell(n+1,t[r],t.__printers[r])})),e.newRow()}),this),e.print()},i.prototype.sort=function(t){if("function"==typeof t)return this.rows.sort(t),this;var e=(Array.isArray(t)?t:this.columns()).map((function(t){var e="asc",r=/(.*)\|\s*(asc|des)\s*$/.exec(t);return r&&(t=r[1],e=r[2]),function(r,n){return"asc"==e?l(r[t],n[t]):l(n[t],r[t])}}));return this.sort((function(t,r){for(var n=0;n<e.length;n++){var i=e[n](t,r);if(0!=i)return i}return 0}))},i.prototype.total=function(t,e){return e=e||{},this.totals=this.totals||{},this.totals[t]={reduce:e.reduce||i.aggr.sum,printer:e.printer||u,init:null==e.init?0:e.init},this},i.aggr={},i.aggr.printer=function(t,e){return e=e||o,function(r,n){return u(t+e(r),n)}},i.aggr.sum=function(t,e){return t+e},i.aggr.avg=function(t,e,r,n){return t+=e,r+1==n?t/n:t},i.print=function(t,e,r){var n=e||{};e="function"==typeof e?e:function(t,e){for(var r in t)if(t.hasOwnProperty(r)){var i=n[r]||{};e(i.name||r,t[r],i.printer)}};var o=new i,c=o.cell.bind(o);return Array.isArray(t)?(r=r||function(t){return t.toString()},t.forEach((function(t){e(t,c),o.newRow()}))):(r=r||function(t){return t.printTransposed({separator:" : "})},e(t,c),o.newRow()),r(o)},i.log=function(t,e,r){console.log(i.print(t,e,r))},i.prototype.log=function(){console.log(this.toString())}},653:function(t){t.exports=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]]},561:function(t,e,r){"use strict";var n=r(451),i=r(653),o={nul:0,control:0};function c(t,e){if("string"!=typeof t)return s(t,e);for(var r=0,n=0;n<t.length;n++){var i=s(t.charCodeAt(n),e);if(i<0)return-1;r+=i}return r}function s(t,e){return 0===t?e.nul:t<32||t>=127&&t<160?e.control:function(t){var e,r=0,n=i.length-1;if(t<i[0][0]||t>i[n][1])return!1;for(;n>=r;)if(e=Math.floor((r+n)/2),t>i[e][1])r=e+1;else{if(!(t<i[e][0]))return!0;n=e-1}return!1}(t)?0:1+(t>=4352&&(t<=4447||9001==t||9002==t||t>=11904&&t<=42191&&12351!=t||t>=44032&&t<=55203||t>=63744&&t<=64255||t>=65040&&t<=65049||t>=65072&&t<=65135||t>=65280&&t<=65376||t>=65504&&t<=65510||t>=131072&&t<=196605||t>=196608&&t<=262141))}t.exports=function(t){return c(t,o)},t.exports.config=function(t){return t=n(t||{},o),function(e){return c(e,t)}}}},e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.d=function(t,e){for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return function(){"use strict";r.r(n),r.d(n,{Bin:function(){return u},Box:function(){return c},Packer:function(){return l},heuristics:function(){return t}});var t={};r.r(t),r.d(t,{BestAreaFit:function(){return p},BestLongSideFit:function(){return y},BestShortSideFit:function(){return o},BottomLeft:function(){return g}});var e=function(){function t(e,r){this.score_1=t.MAX_INT,this.score_2=t.MAX_INT,void 0!==e&&(this.score_1=e),void 0!==r&&(this.score_2=r)}return t.prototype.valueOf=function(){return this.score_1+this.score_2},t.prototype.assign=function(t){this.score_1=t.score_1,this.score_2=t.score_2},t.prototype.isBlank=function(){return this.score_1===t.MAX_INT},t.prototype.decreaseBy=function(t){this.score_1+=t,this.score_2+=t},t.MAX_INT=Number.MAX_SAFE_INTEGER,t}(),i=function(){function t(){}return t.prototype.findPositionForNewNode=function(t,r){var n=this,i=new e,o=t.width,c=t.height;return r.forEach((function(e){n.tryPlaceRectIn(e,t,o,c,i),t.constrainRotation||n.tryPlaceRectIn(e,t,c,o,i)})),i},t.prototype.tryPlaceRectIn=function(t,e,r,n,i){if(t.width>=r&&t.height>=n){var o=this.calculateScore(t,r,n);o<i&&(e.x=t.x,e.y=t.y,e.width=r,e.height=n,e.packed=!0,i.assign(o))}},t.prototype.calculateScore=function(t,e,r){throw"NotImplementedError"},t}();class o extends i{calculateScore(t,r,n){let i=[Math.abs(t.width-r),Math.abs(t.height-n)].sort(((t,e)=>t-e));return new e(i[0],i[1])}}var c=function(t,e,r){void 0===r&&(r=!1),this.width=0,this.height=0,this.x=0,this.y=0,this.constrainRotation=!1,this.packed=!1,this.width=t,this.height=e,this.constrainRotation=r},s=function(){return(s=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t}).apply(this,arguments)},u=function(){function t(t,e,r){this.width=0,this.height=0,this.boxes=[],this.heuristic=null,this.freeRectangles=[],this.width=t,this.height=e,this.freeRectangles=[new a(t,e)],this.heuristic=r||new o}return Object.defineProperty(t.prototype,"area",{get:function(){return this.width*this.height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"efficiency",{get:function(){var t=0;return this.boxes.forEach((function(e){t+=e.width*e.height})),100*t/this.area},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"label",{get:function(){return"".concat(this.width,"x").concat(this.height," ").concat(this.efficiency,"%")},enumerable:!1,configurable:!0}),t.prototype.insert=function(t){if(t.packed)return!1;if(this.heuristic.findPositionForNewNode(t,this.freeRectangles),!t.packed)return!1;for(var e=this.freeRectangles.length,r=0;r<e;)this.splitFreeNode(this.freeRectangles[r],t)?(this.freeRectangles.splice(r,1),e--):r++;return this.pruneFreeList(),this.boxes.push(t),!0},t.prototype.scoreFor=function(t){var e=new c(t.width,t.height,t.constrainRotation);return this.heuristic.findPositionForNewNode(e,this.freeRectangles)},t.prototype.isLargerThan=function(t){return this.width>=t.width&&this.height>=t.height||this.height>=t.width&&this.width>=t.height},t.prototype.splitFreeNode=function(t,e){return!(e.x>=t.x+t.width||e.x+e.width<=t.x||e.y>=t.y+t.height||e.y+e.height<=t.y||(this.trySplitFreeNodeVertically(t,e),this.trySplitFreeNodeHorizontally(t,e),0))},t.prototype.trySplitFreeNodeVertically=function(t,e){e.x<t.x+t.width&&e.x+e.width>t.x&&(this.tryLeaveFreeSpaceAtTop(t,e),this.tryLeaveFreeSpaceAtBottom(t,e))},t.prototype.tryLeaveFreeSpaceAtTop=function(t,e){if(e.y>t.y&&e.y<t.y+t.height){var r=s({},t);r.height=e.y-r.y,this.freeRectangles.push(r)}},t.prototype.tryLeaveFreeSpaceAtBottom=function(t,e){if(e.y+e.height<t.y+t.height){var r=s({},t);r.y=e.y+e.height,r.height=t.y+t.height-(e.y+e.height),this.freeRectangles.push(r)}},t.prototype.trySplitFreeNodeHorizontally=function(t,e){e.y<t.y+t.height&&e.y+e.height>t.y&&(this.tryLeaveFreeSpaceOnLeft(t,e),this.tryLeaveFreeSpaceOnRight(t,e))},t.prototype.tryLeaveFreeSpaceOnLeft=function(t,e){if(e.x>t.x&&e.x<t.x+t.width){var r=s({},t);r.width=e.x-r.x,this.freeRectangles.push(r)}},t.prototype.tryLeaveFreeSpaceOnRight=function(t,e){if(e.x+e.width<t.x+t.width){var r=s({},t);r.x=e.x+e.width,r.width=t.x+t.width-(e.x+e.width),this.freeRectangles.push(r)}},t.prototype.pruneFreeList=function(){for(var t=0;t<this.freeRectangles.length;){var e=t+1;if(e===this.freeRectangles.length)break;for(;e<this.freeRectangles.length;){if(this.isContainedIn(this.freeRectangles[t],this.freeRectangles[e])){this.freeRectangles.splice(t,1),t--;break}this.isContainedIn(this.freeRectangles[e],this.freeRectangles[t])?this.freeRectangles.splice(e,1):e++,t++}}},t.prototype.isContainedIn=function(t,e){return t&&e&&t.x>=e.x&&t.y>=e.y&&t.x+t.width<=e.x+e.width&&t.y+t.height<=e.y+e.height},t}(),a=function(t,e){this.x=0,this.y=0,this.width=null,this.height=null,this.width=t,this.height=e},f=function(){function t(t,e){this.bin=t,this.box=e}return t.prototype.calculate=function(){return this.score=this.bin.scoreFor(this.box),this.score},t.prototype.fit=function(){return!this.score.isBlank()},t}(),h=function(){function t(t,e){var r=this;this.entries=[],t.forEach((function(t){r.addBinEntries(t,e)}))}return t.prototype.debug=function(){r(426),console.table(this.entries.map((function(t){return{bin:t.bin.label,score:t.score}})))},t.prototype.addBinEntries=function(t,e){var r=this;e.forEach((function(e){var n=new f(t,e);n.calculate(),r.entries.push(n)}))},t.prototype.largestNotFitingBox=function(){var t,e=this.entries.filter((function(t){return t.fit})).map((function(t){return t.box}));return this.entries.forEach((function(r){var n=t.box.width*t.box.height,i=r.box.width*r.box.height;e.includes(r.box)&&(null===t||n<i)&&(t=r)})),!!t.box&&t},t.prototype.bestFit=function(){for(var t=null,e=0;e<this.entries.length;e++){var r=this.entries[e];r.fit()&&(null===t||r.score<t.score)&&(t=r)}return t},t.prototype.removeBox=function(t){this.entries=this.entries.filter((function(e){return e.box!==t}))},t.prototype.addBin=function(t){this.addBinEntries(t,this.currentBoxes())},t.prototype.recalculateBin=function(t){this.entries.filter((function(e){return e.bin===t})).forEach((function(t){return t.calculate()}))},t.prototype.currentBoxes=function(){return function(t,e,r){if(r||2===arguments.length)for(var n,i=0,o=e.length;i<o;i++)!n&&i in e||(n||(n=Array.prototype.slice.call(e,0,i)),n[i]=e[i]);return t.concat(n||Array.prototype.slice.call(e))}([],function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),c=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)c.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return c}(new Set(this.entries.map((function(t){return t.box})))),!1)},t}(),l=function(){function t(t){this.bins=[],this.unpackedBoxes=[],this.bins=t}return t.prototype.pack=function(t){var r,n=[];if(0===(t=t.filter((function(t){return!t.packed}))).length)return n;for(var i=e.MAX_INT,o=new h(this.bins,t);(r=o.bestFit())&&(r.bin.insert(r.box),o.removeBox(r.box),o.recalculateBin(r.bin),n.push({box:r.box,score:r.score}),!(n.length>=i)););return this.unpackedBoxes=t.filter((function(t){return!t.packed})),n},t}();class p extends i{calculateScore(t,r,n){let i=t.width*t.height-r*n,o=Math.abs(t.width-r),c=Math.abs(t.height-n),s=Math.min(o,c);return new e(i,s)}}class y extends i{calculateScore(t,r,n){let i=[Math.abs(t.width-r),Math.abs(t.height-n)].sort(((t,e)=>t-e)).reverse();return new e(i[0],i[1])}}class g extends i{calculateScore(t,r,n){let i=t.y+n;return new e(i,t.x)}}}(),n}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9CaW5QYWNraW5nL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9CaW5QYWNraW5nLy4uL25vZGVfbW9kdWxlcy9jbG9uZS9jbG9uZS5qcyIsIndlYnBhY2s6Ly9CaW5QYWNraW5nLy4uL25vZGVfbW9kdWxlcy9jb25zb2xlLnRhYmxlL2luZGV4LmpzIiwid2VicGFjazovL0JpblBhY2tpbmcvLi4vbm9kZV9tb2R1bGVzL2RlZmF1bHRzL2luZGV4LmpzIiwid2VicGFjazovL0JpblBhY2tpbmcvLi4vbm9kZV9tb2R1bGVzL2Vhc3ktdGFibGUvdGFibGUuanMiLCJ3ZWJwYWNrOi8vQmluUGFja2luZy8uLi9ub2RlX21vZHVsZXMvd2N3aWR0aC9jb21iaW5pbmcuanMiLCJ3ZWJwYWNrOi8vQmluUGFja2luZy8uLi9ub2RlX21vZHVsZXMvd2N3aWR0aC9pbmRleC5qcyIsIndlYnBhY2s6Ly9CaW5QYWNraW5nL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL0JpblBhY2tpbmcvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL0JpblBhY2tpbmcvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9CaW5QYWNraW5nL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vQmluUGFja2luZy8uLzJEL1Njb3JlLnRzIiwid2VicGFjazovL0JpblBhY2tpbmcvLi8yRC9oZXVyaXN0aWNzL0Jhc2UudHMiLCJ3ZWJwYWNrOi8vQmluUGFja2luZy8uLzJEL2hldXJpc3RpY3MvQmVzdFNob3J0U2lkZUZpdC5qcyIsIndlYnBhY2s6Ly9CaW5QYWNraW5nLy4vMkQvQm94LnRzIiwid2VicGFjazovL0JpblBhY2tpbmcvLi8yRC9CaW4udHMiLCJ3ZWJwYWNrOi8vQmluUGFja2luZy8uLzJEL1Njb3JlQm9hcmRFbnRyeS50cyIsIndlYnBhY2s6Ly9CaW5QYWNraW5nLy4vMkQvU2NvcmVCb2FyZC50cyIsIndlYnBhY2s6Ly9CaW5QYWNraW5nLy4vMkQvUGFja2VyLnRzIiwid2VicGFjazovL0JpblBhY2tpbmcvLi8yRC9oZXVyaXN0aWNzL0Jlc3RBcmVhRml0LmpzIiwid2VicGFjazovL0JpblBhY2tpbmcvLi8yRC9oZXVyaXN0aWNzL0Jlc3RMb25nU2lkZUZpdC5qcyIsIndlYnBhY2s6Ly9CaW5QYWNraW5nLy4vMkQvaGV1cmlzdGljcy9Cb3R0b21MZWZ0LmpzIl0sIm5hbWVzIjpbInJvb3QiLCJmYWN0b3J5IiwiZXhwb3J0cyIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsInRoaXMiLCJjbG9uZSIsInBhcmVudCIsImNpcmN1bGFyIiwiZGVwdGgiLCJwcm90b3R5cGUiLCJmaWx0ZXIiLCJhbGxQYXJlbnRzIiwiYWxsQ2hpbGRyZW4iLCJ1c2VCdWZmZXIiLCJCdWZmZXIiLCJJbmZpbml0eSIsIl9jbG9uZSIsImNoaWxkIiwicHJvdG8iLCJfX2lzQXJyYXkiLCJfX2lzUmVnRXhwIiwiUmVnRXhwIiwic291cmNlIiwiX19nZXRSZWdFeHBGbGFncyIsImxhc3RJbmRleCIsIl9faXNEYXRlIiwiRGF0ZSIsImdldFRpbWUiLCJpc0J1ZmZlciIsImFsbG9jVW5zYWZlIiwibGVuZ3RoIiwiY29weSIsIk9iamVjdCIsImdldFByb3RvdHlwZU9mIiwiY3JlYXRlIiwiaW5kZXgiLCJpbmRleE9mIiwicHVzaCIsImkiLCJhdHRycyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInNldCIsIl9fb2JqVG9TdHIiLCJvIiwidG9TdHJpbmciLCJjYWxsIiwicmUiLCJmbGFncyIsImdsb2JhbCIsImlnbm9yZUNhc2UiLCJtdWx0aWxpbmUiLCJjbG9uZVByb3RvdHlwZSIsImMiLCJjb25zb2xlIiwiRXJyb3IiLCJ0YWJsZSIsImNvbnNvbGVUYWJsZSIsImlzU3RyaW5nIiwidCIsIngiLCJiaW5kIiwiaXNBcnJheU9mU3RyaW5ncyIsImlzQXJyYXlPZiIsImlzQXJyYXlPZkFycmF5cyIsIkFycmF5IiwiaXNBcnJheSIsIlRhYmxlIiwiZ2V0VGFibGUiLCJhcmdzIiwic2xpY2UiLCJhcmd1bWVudHMiLCJzdHJUb1JldHVybiIsImdldFRpdGxlVGFibGUiLCJwcmludFRhYmxlV2l0aENvbHVtblRpdGxlcyIsImZvckVhY2giLCJrIiwiYXJyYXlUb1N0cmluZyIsIm9iamVjdFRvU3RyaW5nIiwiaXNUeXBlRm4iLCJhIiwiZXZlcnkiLCJhcnIiLCJyZWNvcmQiLCJjZWxsIiwia2V5cyIsInByb3BlcnR5IiwibmV3Um93IiwidGl0bGVzIiwiaXRlbXMiLCJub0NvbnNvbGUiLCJpdGVtIiwidmFsdWUiLCJzdHIiLCJsb2ciLCJwcmludFRpdGxlVGFibGUiLCJ0aXRsZSIsInJvd0xlbmd0aCIsImxpbmUiLCJvYmoiLCJtYXAiLCJrZXkiLCJvYmplY3RUb0FycmF5Iiwic2V0dXBDb25zb2xlVGFibGUiLCJvcHRpb25zIiwiZGVmYXVsdHMiLCJ3Y3dpZHRoIiwiZSIsInJvd3MiLCJyb3ciLCJfX3ByaW50ZXJzIiwic3RyaW5nIiwidmFsIiwidW5kZWZpbmVkIiwicyIsInJlcGxhY2UiLCJsZWZ0UGFkZGVyIiwiY2giLCJ3aWR0aCIsImxlbiIsImpvaW4iLCJjb2wiLCJwcmludGVyIiwic2VwYXJhdG9yIiwicGFkTGVmdCIsInJpZ2h0UGFkZGVyIiwicGFkUmlnaHQiLCJlYWNoIiwiZm4iLCJjb21wYXJlIiwiYiIsIlN0cmluZyIsIm51bWJlciIsImRpZ2l0cyIsInRvRml4ZWQiLCJjb2x1bW5zIiwiY29scyIsImlkeCIsIk1hdGgiLCJtYXgiLCJzb3J0IiwicHJpbnQiLCJ3aWR0aHMiLCJvdXQiLCJoYXNPd25Qcm9wZXJ0eSIsInB1c2hEZWxpbWV0ZXIiLCJjb25jYXQiLCJ0b3RhbHMiLCJmb3JFYWNoVG90YWwiLCJjYiIsImFnZ3IiLCJhY2MiLCJpbml0IiwicmVkdWNlIiwicHJpbnRUcmFuc3Bvc2VkIiwib3B0cyIsIm5hbWVQcmludGVyIiwiY21wIiwiY29tcGFyYXRvcnMiLCJvcmRlciIsIm0iLCJleGVjIiwidG90YWwiLCJzdW0iLCJwcmVmaXgiLCJhdmciLCJmb3JtYXQiLCJwYXJhbXMiLCJuYW1lIiwiY29tYmluaW5nIiwiREVGQVVMVFMiLCJudWwiLCJjb250cm9sIiwid2Nzd2lkdGgiLCJuIiwiY2hhckNvZGVBdCIsInVjcyIsIm1pZCIsIm1pbiIsImZsb29yIiwiYmlzZWFyY2giLCJjb25maWciLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwcm9wIiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwic2NvcmVfMSIsInNjb3JlXzIiLCJTY29yZSIsIk1BWF9JTlQiLCJ2YWx1ZU9mIiwiYXNzaWduIiwib3RoZXIiLCJpc0JsYW5rIiwiZGVjcmVhc2VCeSIsImRlbHRhIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsImZpbmRQb3NpdGlvbkZvck5ld05vZGUiLCJib3giLCJmcmVlUmVjdHMiLCJiZXN0U2NvcmUiLCJoZWlnaHQiLCJmcmVlUmVjdCIsInRyeVBsYWNlUmVjdEluIiwiY29uc3RyYWluUm90YXRpb24iLCJyZWN0V2lkdGgiLCJyZWN0SGVpZ2h0Iiwic2NvcmUiLCJjYWxjdWxhdGVTY29yZSIsInkiLCJwYWNrZWQiLCJfZnJlZVJlY3QiLCJfcmVjdFdpZHRoIiwiX3JlY3RIZWlnaHQiLCJCZXN0U2hvcnRTaWRlRml0IiwiYWJzIiwiaGV1cmlzdGljIiwiYm94ZXMiLCJmcmVlUmVjdGFuZ2xlcyIsIkZyZWVTcGFjZUJveCIsImJveGVzQXJlYSIsImFyZWEiLCJlZmZpY2llbmN5IiwiaW5zZXJ0IiwibnVtUmVjdGFuZ2xlc1RvUHJvY2VzcyIsInNwbGl0RnJlZU5vZGUiLCJzcGxpY2UiLCJwcnVuZUZyZWVMaXN0Iiwic2NvcmVGb3IiLCJjb3B5Qm94IiwiaXNMYXJnZXJUaGFuIiwiZnJlZU5vZGUiLCJ1c2VkTm9kZSIsInRyeVNwbGl0RnJlZU5vZGVWZXJ0aWNhbGx5IiwidHJ5U3BsaXRGcmVlTm9kZUhvcml6b250YWxseSIsInRyeUxlYXZlRnJlZVNwYWNlQXRUb3AiLCJ0cnlMZWF2ZUZyZWVTcGFjZUF0Qm90dG9tIiwibmV3Tm9kZSIsInRyeUxlYXZlRnJlZVNwYWNlT25MZWZ0IiwidHJ5TGVhdmVGcmVlU3BhY2VPblJpZ2h0IiwiaiIsImlzQ29udGFpbmVkSW4iLCJyZWN0QSIsInJlY3RCIiwiYmluIiwiY2FsY3VsYXRlIiwiZml0IiwiYmlucyIsImVudHJpZXMiLCJhZGRCaW5FbnRyaWVzIiwiZGVidWciLCJlbnRyeSIsImxhYmVsIiwibGFyZ2VzdE5vdEZpdGluZ0JveCIsInVuZml0IiwiZml0dGluZ0JveGVzIiwidW5maXRBcmVhIiwiZW50cnlBcmVhIiwiaW5jbHVkZXMiLCJiZXN0Rml0IiwiYmVzdCIsInJlbW92ZUJveCIsImFkZEJpbiIsImN1cnJlbnRCb3hlcyIsInJlY2FsY3VsYXRlQmluIiwiU2V0IiwidW5wYWNrZWRCb3hlcyIsInBhY2siLCJwYWNrZWRCb3hlcyIsImxpbWl0IiwiYm9hcmQiLCJCZXN0QXJlYUZpdCIsImFyZWFGaXQiLCJsZWZ0T3Zlckhvcml6IiwibGVmdE92ZXJWZXJ0Iiwic2hvcnRTaWRlRml0IiwiQmVzdExvbmdTaWRlRml0IiwicmV2ZXJzZSIsIkJvdHRvbUxlZnQiLCJ0b3BTaWRlWSJdLCJtYXBwaW5ncyI6IkNBQUEsU0FBMkNBLEVBQU1DLEdBQzFCLGlCQUFaQyxTQUEwQyxpQkFBWEMsT0FDeENBLE9BQU9ELFFBQVVELElBQ1EsbUJBQVhHLFFBQXlCQSxPQUFPQyxJQUM5Q0QsT0FBTyxhQUFjLEdBQUlILEdBQ0MsaUJBQVpDLFFBQ2RBLFFBQW9CLFdBQUlELElBRXhCRCxFQUFpQixXQUFJQyxJQVJ2QixDQVNHSyxNQUFNLFdBQ1QsTyxpQ0NWQSxJQUFJQyxFQUFR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TUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUNsRCxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUNsRCxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUNsRCxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUNsRCxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUNsRCxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUNsRCxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUNsRCxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUNsRCxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUNsRCxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUNsRCxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFBVSxDQUFFLEtBQVEsTUFDbEQsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQVUsQ0FBRSxLQUFRLE1BQ2xELENBQUUsS0FBUSxNQUFVLENBQUUsS0FBUSxNQUFVLENBQUUsTUFBUSxPQUNsRCxDQUFFLE1BQVEsT0FBVSxDQUFFLE1BQVEsT0FBVSxDQUFFLE1BQVEsT0FDbEQsQ0FBRSxNQUFRLE9BQVUsQ0FBRSxNQUFRLE9BQVUsQ0FBRSxNQUFRLE9BQ2xELENBQUUsTUFBUSxPQUFVLENBQUUsTUFBUSxPQUFVLENBQUUsTUFBUSxPQUNsRCxDQUFFLE1BQVMsT0FBVyxDQUFFLE1BQVMsT0FBVyxDQUFFLE1BQVMsT0FDdkQsQ0FBRSxNQUFTLE9BQVcsQ0FBRSxNQUFTLE9BQVcsQ0FBRSxPQUFTLFFBQ3ZELENBQUUsT0FBUyxRQUFXLENBQUUsT0FBUyxRQUFXLENBQUUsT0FBUyxRQUN2RCxDQUFFLE9BQVMsUUFBVyxDQUFFLE9BQVMsUUFBVyxDQUFFLE9BQVMsUUFDdkQs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T0FBTyxJQUFJLEVBQU1GLEVBQVNHLElDUGYsTUFBTUMsVUFBd0IsRUFFM0MsZUFBZTFFLEVBQVVHLEVBQVdDLEdBQ2xDLElBRUluSixFQUFPLENBRlNxRSxLQUFLdUYsSUFBSWIsRUFBUzlGLE1BQVFpRyxHQUMzQjdFLEtBQUt1RixJQUFJYixFQUFTRCxPQUFTSyxJQUNMNUUsTUFBSyxDQUFDNUQsRUFBR2tELElBQU1sRCxFQUFJa0QsSUFBRzZKLFVBQy9ELE9BQU8sSUFBSSxFQUFNMU4sRUFBSyxHQUFJQSxFQUFLLEtDTnBCLE1BQU0yTixVQUFtQixFQUV0QyxlQUFlNUUsRUFBVUcsRUFBV0MsR0FDbEMsSUFBSXlFLEVBQVc3RSxFQUFTTyxFQUFJSCxFQUM1QixPQUFPLElBQUksRUFBTXlFLEVBQVU3RSxFQUFTeEosSyIsImZpbGUiOiJCUDJELm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFwiQmluUGFja2luZ1wiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJCaW5QYWNraW5nXCJdID0gZmFjdG9yeSgpO1xuXHRlbHNlXG5cdFx0cm9vdFtcIkJpblBhY2tpbmdcIl0gPSBmYWN0b3J5KCk7XG59KSh0aGlzLCBmdW5jdGlvbigpIHtcbnJldHVybiAiLCJ2YXIgY2xvbmUgPSAoZnVuY3Rpb24oKSB7XG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ2xvbmVzIChjb3BpZXMpIGFuIE9iamVjdCB1c2luZyBkZWVwIGNvcHlpbmcuXG4gKlxuICogVGhpcyBmdW5jdGlvbiBzdXBwb3J0cyBjaXJjdWxhciByZWZlcmVuY2VzIGJ5IGRlZmF1bHQsIGJ1dCBpZiB5b3UgYXJlIGNlcnRhaW5cbiAqIHRoZXJlIGFyZSBubyBjaXJjdWxhciByZWZlcmVuY2VzIGluIHlvdXIgb2JqZWN0LCB5b3UgY2FuIHNhdmUgc29tZSBDUFUgdGltZVxuICogYnkgY2FsbGluZyBjbG9uZShvYmosIGZhbHNlKS5cbiAqXG4gKiBDYXV0aW9uOiBpZiBgY2lyY3VsYXJgIGlzIGZhbHNlIGFuZCBgcGFyZW50YCBjb250YWlucyBjaXJjdWxhciByZWZlcmVuY2VzLFxuICogeW91ciBwcm9ncmFtIG1heSBlbnRlciBhbiBpbmZpbml0ZSBsb29wIGFuZCBjcmFzaC5cbiAqXG4gKiBAcGFyYW0gYHBhcmVudGAgLSB0aGUgb2JqZWN0IHRvIGJlIGNsb25lZFxuICogQHBhcmFtIGBjaXJjdWxhcmAgLSBzZXQgdG8gdHJ1ZSBpZiB0aGUgb2JqZWN0IHRvIGJlIGNsb25lZCBtYXkgY29udGFpblxuICogICAgY2lyY3VsYXIgcmVmZXJlbmNlcy4gKG9wdGlvbmFsIC0gdHJ1ZSBieSBkZWZhdWx0KVxuICogQHBhcmFtIGBkZXB0aGAgLSBzZXQgdG8gYSBudW1iZXIgaWYgdGhlIG9iamVjdCBpcyBvbmx5IHRvIGJlIGNsb25lZCB0b1xuICogICAgYSBwYXJ0aWN1bGFyIGRlcHRoLiAob3B0aW9uYWwgLSBkZWZhdWx0cyB0byBJbmZpbml0eSlcbiAqIEBwYXJhbSBgcHJvdG90eXBlYCAtIHNldHMgdGhlIHByb3RvdHlwZSB0byBiZSB1c2VkIHdoZW4gY2xvbmluZyBhbiBvYmplY3QuXG4gKiAgICAob3B0aW9uYWwgLSBkZWZhdWx0cyB0byBwYXJlbnQgcHJvdG90eXBlKS5cbiovXG5mdW5jdGlvbiBjbG9uZShwYXJlbnQsIGNpcmN1bGFyLCBkZXB0aCwgcHJvdG90eXBlKSB7XG4gIHZhciBmaWx0ZXI7XG4gIGlmICh0eXBlb2YgY2lyY3VsYXIgPT09ICdvYmplY3QnKSB7XG4gICAgZGVwdGggPSBjaXJjdWxhci5kZXB0aDtcbiAgICBwcm90b3R5cGUgPSBjaXJjdWxhci5wcm90b3R5cGU7XG4gICAgZmlsdGVyID0gY2lyY3VsYXIuZmlsdGVyO1xuICAgIGNpcmN1bGFyID0gY2lyY3VsYXIuY2lyY3VsYXJcbiAgfVxuICAvLyBtYWludGFpbiB0d28gYXJyYXlzIGZvciBjaXJjdWxhciByZWZlcmVuY2VzLCB3aGVyZSBjb3JyZXNwb25kaW5nIHBhcmVudHNcbiAgLy8gYW5kIGNoaWxkcmVuIGhhdmUgdGhlIHNhbWUgaW5kZXhcbiAgdmFyIGFsbFBhcmVudHMgPSBbXTtcbiAgdmFyIGFsbENoaWxkcmVuID0gW107XG5cbiAgdmFyIHVzZUJ1ZmZlciA9IHR5cGVvZiBCdWZmZXIgIT0gJ3VuZGVmaW5lZCc7XG5cbiAgaWYgKHR5cGVvZiBjaXJjdWxhciA9PSAndW5kZWZpbmVkJylcbiAgICBjaXJjdWxhciA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBkZXB0aCA9PSAndW5kZWZpbmVkJylcbiAgICBkZXB0aCA9IEluZmluaXR5O1xuXG4gIC8vIHJlY3Vyc2UgdGhpcyBmdW5jdGlvbiBzbyB3ZSBkb24ndCByZXNldCBhbGxQYXJlbnRzIGFuZCBhbGxDaGlsZHJlblxuICBmdW5jdGlvbiBfY2xvbmUocGFyZW50LCBkZXB0aCkge1xuICAgIC8vIGNsb25pbmcgbnVsbCBhbHdheXMgcmV0dXJucyBudWxsXG4gICAgaWYgKHBhcmVudCA9PT0gbnVsbClcbiAgICAgIHJldHVybiBudWxsO1xuXG4gICAgaWYgKGRlcHRoID09IDApXG4gICAgICByZXR1cm4gcGFyZW50O1xuXG4gICAgdmFyIGNoaWxkO1xuICAgIHZhciBwcm90bztcbiAgICBpZiAodHlwZW9mIHBhcmVudCAhPSAnb2JqZWN0Jykge1xuICAgICAgcmV0dXJuIHBhcmVudDtcbiAgICB9XG5cbiAgICBpZiAoY2xvbmUuX19pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gW107XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzUmVnRXhwKHBhcmVudCkpIHtcbiAgICAgIGNoaWxkID0gbmV3IFJlZ0V4cChwYXJlbnQuc291cmNlLCBfX2dldFJlZ0V4cEZsYWdzKHBhcmVudCkpO1xuICAgICAgaWYgKHBhcmVudC5sYXN0SW5kZXgpIGNoaWxkLmxhc3RJbmRleCA9IHBhcmVudC5sYXN0SW5kZXg7XG4gICAgfSBlbHNlIGlmIChjbG9uZS5fX2lzRGF0ZShwYXJlbnQpKSB7XG4gICAgICBjaGlsZCA9IG5ldyBEYXRlKHBhcmVudC5nZXRUaW1lKCkpO1xuICAgIH0gZWxzZSBpZiAodXNlQnVmZmVyICYmIEJ1ZmZlci5pc0J1ZmZlcihwYXJlbnQpKSB7XG4gICAgICBpZiAoQnVmZmVyLmFsbG9jVW5zYWZlKSB7XG4gICAgICAgIC8vIE5vZGUuanMgPj0gNC41LjBcbiAgICAgICAgY2hpbGQgPSBCdWZmZXIuYWxsb2NVbnNhZmUocGFyZW50Lmxlbmd0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBPbGRlciBOb2RlLmpzIHZlcnNpb25zXG4gICAgICAgIGNoaWxkID0gbmV3IEJ1ZmZlcihwYXJlbnQubGVuZ3RoKTtcbiAgICAgIH1cbiAgICAgIHBhcmVudC5jb3B5KGNoaWxkKTtcbiAgICAgIHJldHVybiBjaGlsZDtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHR5cGVvZiBwcm90b3R5cGUgPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YocGFyZW50KTtcbiAgICAgICAgY2hpbGQgPSBPYmplY3QuY3JlYXRlKHByb3RvKTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBjaGlsZCA9IE9iamVjdC5jcmVhdGUocHJvdG90eXBlKTtcbiAgICAgICAgcHJvdG8gPSBwcm90b3R5cGU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGNpcmN1bGFyKSB7XG4gICAgICB2YXIgaW5kZXggPSBhbGxQYXJlbnRzLmluZGV4T2YocGFyZW50KTtcblxuICAgICAgaWYgKGluZGV4ICE9IC0xKSB7XG4gICAgICAgIHJldHVybiBhbGxDaGlsZHJlbltpbmRleF07XG4gICAgICB9XG4gICAgICBhbGxQYXJlbnRzLnB1c2gocGFyZW50KTtcbiAgICAgIGFsbENoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgaW4gcGFyZW50KSB7XG4gICAgICB2YXIgYXR0cnM7XG4gICAgICBpZiAocHJvdG8pIHtcbiAgICAgICAgYXR0cnMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGF0dHJzICYmIGF0dHJzLnNldCA9PSBudWxsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgY2hpbGRbaV0gPSBfY2xvbmUocGFyZW50W2ldLCBkZXB0aCAtIDEpO1xuICAgIH1cblxuICAgIHJldHVybiBjaGlsZDtcbiAgfVxuXG4gIHJldHVybiBfY2xvbmUocGFyZW50LCBkZXB0aCk7XG59XG5cbi8qKlxuICogU2ltcGxlIGZsYXQgY2xvbmUgdXNpbmcgcHJvdG90eXBlLCBhY2NlcHRzIG9ubHkgb2JqZWN0cywgdXNlZnVsbCBmb3IgcHJvcGVydHlcbiAqIG92ZXJyaWRlIG9uIEZMQVQgY29uZmlndXJhdGlvbiBvYmplY3QgKG5vIG5lc3RlZCBwcm9wcykuXG4gKlxuICogVVNFIFdJVEggQ0FVVElPTiEgVGhpcyBtYXkgbm90IGJlaGF2ZSBhcyB5b3Ugd2lzaCBpZiB5b3UgZG8gbm90IGtub3cgaG93IHRoaXNcbiAqIHdvcmtzLlxuICovXG5jbG9uZS5jbG9uZVByb3RvdHlwZSA9IGZ1bmN0aW9uIGNsb25lUHJvdG90eXBlKHBhcmVudCkge1xuICBpZiAocGFyZW50ID09PSBudWxsKVxuICAgIHJldHVybiBudWxsO1xuXG4gIHZhciBjID0gZnVuY3Rpb24gKCkge307XG4gIGMucHJvdG90eXBlID0gcGFyZW50O1xuICByZXR1cm4gbmV3IGMoKTtcbn07XG5cbi8vIHByaXZhdGUgdXRpbGl0eSBmdW5jdGlvbnNcblxuZnVuY3Rpb24gX19vYmpUb1N0cihvKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG59O1xuY2xvbmUuX19vYmpUb1N0ciA9IF9fb2JqVG9TdHI7XG5cbmZ1bmN0aW9uIF9faXNEYXRlKG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBfX29ialRvU3RyKG8pID09PSAnW29iamVjdCBEYXRlXSc7XG59O1xuY2xvbmUuX19pc0RhdGUgPSBfX2lzRGF0ZTtcblxuZnVuY3Rpb24gX19pc0FycmF5KG8pIHtcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiBfX29ialRvU3RyKG8pID09PSAnW29iamVjdCBBcnJheV0nO1xufTtcbmNsb25lLl9faXNBcnJheSA9IF9faXNBcnJheTtcblxuZnVuY3Rpb24gX19pc1JlZ0V4cChvKSB7XG4gIHJldHVybiB0eXBlb2YgbyA9PT0gJ29iamVjdCcgJiYgX19vYmpUb1N0cihvKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59O1xuY2xvbmUuX19pc1JlZ0V4cCA9IF9faXNSZWdFeHA7XG5cbmZ1bmN0aW9uIF9fZ2V0UmVnRXhwRmxhZ3MocmUpIHtcbiAgdmFyIGZsYWdzID0gJyc7XG4gIGlmIChyZS5nbG9iYWwpIGZsYWdzICs9ICdnJztcbiAgaWYgKHJlLmlnbm9yZUNhc2UpIGZsYWdzICs9ICdpJztcbiAgaWYgKHJlLm11bHRpbGluZSkgZmxhZ3MgKz0gJ20nO1xuICByZXR1cm4gZmxhZ3M7XG59O1xuY2xvbmUuX19nZXRSZWdFeHBGbGFncyA9IF9fZ2V0UmVnRXhwRmxhZ3M7XG5cbnJldHVybiBjbG9uZTtcbn0pKCk7XG5cbmlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUuZXhwb3J0cykge1xuICBtb2R1bGUuZXhwb3J0cyA9IGNsb25lO1xufVxuIiwiKGZ1bmN0aW9uICgpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIGZ1bmN0aW9uIHNldHVwQ29uc29sZVRhYmxlKCkge1xuICAgIGlmICh0eXBlb2YgY29uc29sZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignV2VpcmQsIGNvbnNvbGUgb2JqZWN0IGlzIHVuZGVmaW5lZCcpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbnNvbGUudGFibGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIC8vIGlmIGl0IGlzIG5vdCBPVVIgZnVuY3Rpb24sIG92ZXJ3cml0ZSBpdFxuICAgICAgaWYgKGNvbnNvbGUudGFibGUgPT09IGNvbnNvbGVUYWJsZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNUeXBlKHQsIHgpIHtcbiAgICAgIHJldHVybiB0eXBlb2YgeCA9PT0gdDtcbiAgICB9XG5cbiAgICB2YXIgaXNTdHJpbmcgPSBpc1R5cGUuYmluZChudWxsLCAnc3RyaW5nJyk7XG5cbiAgICBmdW5jdGlvbiBpc0FycmF5T2YoaXNUeXBlRm4sIGEpIHtcbiAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGEpICYmXG4gICAgICAgIGEuZXZlcnkoaXNUeXBlRm4pO1xuICAgIH1cblxuICAgIHZhciBpc0FycmF5T2ZTdHJpbmdzID0gaXNBcnJheU9mLmJpbmQobnVsbCwgaXNTdHJpbmcpO1xuICAgIHZhciBpc0FycmF5T2ZBcnJheXMgPSBpc0FycmF5T2YuYmluZChudWxsLCBBcnJheS5pc0FycmF5KTtcblxuICAgIHZhciBUYWJsZSA9IHJlcXVpcmUoJ2Vhc3ktdGFibGUnKTtcblxuICAgIGZ1bmN0aW9uIGFycmF5VG9TdHJpbmcoYXJyKSB7XG4gICAgICB2YXIgdCA9IG5ldyBUYWJsZSgpO1xuICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKHJlY29yZCkge1xuICAgICAgICBpZiAodHlwZW9mIHJlY29yZCA9PT0gJ3N0cmluZycgfHxcbiAgICAgICAgICB0eXBlb2YgcmVjb3JkID09PSAnbnVtYmVyJykge1xuICAgICAgICAgIHQuY2VsbCgnaXRlbScsIHJlY29yZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gYXNzdW1lIHBsYWluIG9iamVjdFxuICAgICAgICAgIE9iamVjdC5rZXlzKHJlY29yZCkuZm9yRWFjaChmdW5jdGlvbiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgIHQuY2VsbChwcm9wZXJ0eSwgcmVjb3JkW3Byb3BlcnR5XSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdC5uZXdSb3coKTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHQudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmludFRhYmxlV2l0aENvbHVtblRpdGxlcyh0aXRsZXMsIGl0ZW1zLG5vQ29uc29sZSkge1xuICAgICAgdmFyIHQgPSBuZXcgVGFibGUoKTtcbiAgICAgIGl0ZW1zLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgaXRlbS5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSwgaykge1xuICAgICAgICAgIHQuY2VsbCh0aXRsZXNba10sIHZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHQubmV3Um93KCk7XG4gICAgICB9KTtcbiAgICAgIHZhciBzdHIgPSB0LnRvU3RyaW5nKCk7XG5cbiAgICAgIHJldHVybiBub0NvbnNvbGUgPyBzdHIgOiBjb25zb2xlLmxvZyhzdHIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHByaW50VGl0bGVUYWJsZSh0aXRsZSwgYXJyKSB7XG4gICAgICB2YXIgc3RyID0gYXJyYXlUb1N0cmluZyhhcnIpO1xuICAgICAgdmFyIHJvd0xlbmd0aCA9IHN0ci5pbmRleE9mKCdcXG4nKTtcbiAgICAgIGlmIChyb3dMZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICh0aXRsZS5sZW5ndGggPiByb3dMZW5ndGgpIHtcbiAgICAgICAgICByb3dMZW5ndGggPSB0aXRsZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2codGl0bGUpO1xuICAgICAgICB2YXIgc2VwID0gJy0nLCBrLCBsaW5lID0gJyc7XG4gICAgICAgIGZvciAoayA9IDA7IGsgPCByb3dMZW5ndGg7IGsgKz0gMSkge1xuICAgICAgICAgIGxpbmUgKz0gc2VwO1xuICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2cobGluZSk7XG4gICAgICB9XG4gICAgICBjb25zb2xlLmxvZyhzdHIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFRpdGxlVGFibGUodGl0bGUsIGFycikge1xuICAgICAgdmFyIHN0ciA9IGFycmF5VG9TdHJpbmcoYXJyKTtcbiAgICAgIHZhciByb3dMZW5ndGggPSBzdHIuaW5kZXhPZignXFxuJyk7XG4gICAgICB2YXIgc3RyVG9SZXR1cm4gPSAnJztcbiAgICAgIGlmIChyb3dMZW5ndGggPiAwKSB7XG4gICAgICAgIGlmICh0aXRsZS5sZW5ndGggPiByb3dMZW5ndGgpIHtcbiAgICAgICAgICByb3dMZW5ndGggPSB0aXRsZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHN0clRvUmV0dXJuICs9IHRpdGxlICsgJ1xcbic7XG4gICAgICAgIHZhciBzZXAgPSAnLScsIGssIGxpbmUgPSAnJztcbiAgICAgICAgZm9yIChrID0gMDsgayA8IHJvd0xlbmd0aDsgayArPSAxKSB7XG4gICAgICAgICAgbGluZSArPSBzZXA7XG4gICAgICAgIH1cblx0XG4gICAgICAgIHN0clRvUmV0dXJuICs9IGxpbmUgKyAnXFxuJztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHN0clRvUmV0dXJuICsgc3RyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9iamVjdFRvQXJyYXkob2JqKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgICByZXR1cm4ga2V5cy5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgIHZhbHVlOiBvYmpba2V5XVxuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb2JqZWN0VG9TdHJpbmcob2JqKSB7XG4gICAgICByZXR1cm4gYXJyYXlUb1N0cmluZyhvYmplY3RUb0FycmF5KG9iaikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNvbnNvbGVUYWJsZSAoKSB7XG4gICAgICB2YXIgYXJncyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheShhcmdzWzFdKSkge1xuXG4gICAgICAgIHJldHVybiBwcmludFRpdGxlVGFibGUoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICB9XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICBpc0FycmF5T2ZTdHJpbmdzKGFyZ3NbMF0pICYmXG4gICAgICAgIGlzQXJyYXlPZkFycmF5cyhhcmdzWzFdKSkge1xuICAgICAgICByZXR1cm4gcHJpbnRUYWJsZVdpdGhDb2x1bW5UaXRsZXMoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgICB9XG5cbiAgICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgICBpZiAodHlwZW9mIGsgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKGspO1xuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoaykpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhhcnJheVRvU3RyaW5nKGspKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgayA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhvYmplY3RUb1N0cmluZyhrKSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIG1vZHVsZS5leHBvcnRzLmdldFRhYmxlID0gZnVuY3Rpb24oKXtcbiAgICAgIHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblxuICAgICAgdmFyIHN0clRvUmV0dXJuID0gJyc7XG5cbiAgICAgIGlmIChhcmdzLmxlbmd0aCA9PT0gMiAmJlxuICAgICAgICB0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheShhcmdzWzFdKSkge1xuXG4gICAgICAgIHJldHVybiBnZXRUaXRsZVRhYmxlKGFyZ3NbMF0sIGFyZ3NbMV0pO1xuICAgICAgfVxuXG4gICAgICBpZiAoYXJncy5sZW5ndGggPT09IDIgJiZcbiAgICAgICAgaXNBcnJheU9mU3RyaW5ncyhhcmdzWzBdKSAmJlxuICAgICAgICBpc0FycmF5T2ZBcnJheXMoYXJnc1sxXSkpIHtcbiAgICAgICAgcmV0dXJuIHByaW50VGFibGVXaXRoQ29sdW1uVGl0bGVzKGFyZ3NbMF0sIGFyZ3NbMV0sdHJ1ZSk7XG4gICAgICB9XG5cbiAgICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoayxpKSB7XG4gICAgICAgIGlmICh0eXBlb2YgayA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBzdHJUb1JldHVybiArPSBrO1xuXHQgIGlmIChpICE9PSBhcmdzLmxlbmd0aCAtIDEpe1xuXHQgICAgc3RyVG9SZXR1cm4gKz0gJ1xcbic7XG5cdCAgfVxuICAgICAgICAgIHJldHVybiA7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShrKSkge1xuICAgICAgICAgIHN0clRvUmV0dXJuICs9IGFycmF5VG9TdHJpbmcoaykgKyAnXFxuJztcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgayA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBzdHJUb1JldHVybiArPSBvYmplY3RUb1N0cmluZyhrKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBzdHJUb1JldHVybjtcbiAgICB9O1xuXG4gICAgY29uc29sZS50YWJsZSA9IGNvbnNvbGVUYWJsZTtcbiAgfVxuXG4gIHNldHVwQ29uc29sZVRhYmxlKCk7XG59KCkpO1xuIiwidmFyIGNsb25lID0gcmVxdWlyZSgnY2xvbmUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcHRpb25zLCBkZWZhdWx0cykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICBPYmplY3Qua2V5cyhkZWZhdWx0cykuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIG9wdGlvbnNba2V5XSA9IGNsb25lKGRlZmF1bHRzW2tleV0pO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIG9wdGlvbnM7XG59OyIsInZhciB3Y3dpZHRoXG5cbnRyeSB7XG4gIHdjd2lkdGggPSByZXF1aXJlKCd3Y3dpZHRoJylcbn0gY2F0Y2goZSkge31cblxubW9kdWxlLmV4cG9ydHMgPSBUYWJsZVxuXG5mdW5jdGlvbiBUYWJsZSgpIHtcbiAgdGhpcy5yb3dzID0gW11cbiAgdGhpcy5yb3cgPSB7X19wcmludGVycyA6IHt9fVxufVxuXG4vKipcbiAqIFB1c2ggdGhlIGN1cnJlbnQgcm93IHRvIHRoZSB0YWJsZSBhbmQgc3RhcnQgYSBuZXcgb25lXG4gKlxuICogQHJldHVybnMge1RhYmxlfSBgdGhpc2BcbiAqL1xuXG5UYWJsZS5wcm90b3R5cGUubmV3Um93ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMucm93cy5wdXNoKHRoaXMucm93KVxuICB0aGlzLnJvdyA9IHtfX3ByaW50ZXJzIDoge319XG4gIHJldHVybiB0aGlzXG59XG5cbi8qKlxuICogV3JpdGUgY2VsbCBpbiB0aGUgY3VycmVudCByb3dcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gY29sICAgICAgICAgIC0gQ29sdW1uIG5hbWVcbiAqIEBwYXJhbSB7QW55fSB2YWwgICAgICAgICAgICAgLSBDZWxsIHZhbHVlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbcHJpbnRlcl0gIC0gUHJpbnRlciBmdW5jdGlvbiB0byBmb3JtYXQgdGhlIHZhbHVlXG4gKiBAcmV0dXJucyB7VGFibGV9IGB0aGlzYFxuICovXG5cblRhYmxlLnByb3RvdHlwZS5jZWxsID0gZnVuY3Rpb24oY29sLCB2YWwsIHByaW50ZXIpIHtcbiAgdGhpcy5yb3dbY29sXSA9IHZhbFxuICB0aGlzLnJvdy5fX3ByaW50ZXJzW2NvbF0gPSBwcmludGVyIHx8IHN0cmluZ1xuICByZXR1cm4gdGhpc1xufVxuXG4vKipcbiAqIFN0cmluZyB0byBzZXBhcmF0ZSBjb2x1bW5zXG4gKi9cblxuVGFibGUucHJvdG90eXBlLnNlcGFyYXRvciA9ICcgICdcblxuZnVuY3Rpb24gc3RyaW5nKHZhbCkge1xuICByZXR1cm4gdmFsID09PSB1bmRlZmluZWQgPyAnJyA6ICcnK3ZhbFxufVxuXG5mdW5jdGlvbiBsZW5ndGgoc3RyKSB7XG4gIHZhciBzID0gc3RyLnJlcGxhY2UoL1xcdTAwMWJcXFtcXGQrbS9nLCAnJylcbiAgcmV0dXJuIHdjd2lkdGggPT0gbnVsbCA/IHMubGVuZ3RoIDogd2N3aWR0aChzKVxufVxuXG4vKipcbiAqIERlZmF1bHQgcHJpbnRlclxuICovXG5cblRhYmxlLnN0cmluZyA9IHN0cmluZ1xuXG4vKipcbiAqIENyZWF0ZSBhIHByaW50ZXIgd2hpY2ggcmlnaHQgYWxpZ25zIHRoZSBjb250ZW50IGJ5IHBhZGRpbmcgd2l0aCBgY2hgIG9uIHRoZSBsZWZ0XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IGNoXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cblxuVGFibGUubGVmdFBhZGRlciA9IGxlZnRQYWRkZXJcblxuZnVuY3Rpb24gbGVmdFBhZGRlcihjaCkge1xuICByZXR1cm4gZnVuY3Rpb24odmFsLCB3aWR0aCkge1xuICAgIHZhciBzdHIgPSBzdHJpbmcodmFsKVxuICAgIHZhciBsZW4gPSBsZW5ndGgoc3RyKVxuICAgIHZhciBwYWQgPSB3aWR0aCA+IGxlbiA/IEFycmF5KHdpZHRoIC0gbGVuICsgMSkuam9pbihjaCkgOiAnJ1xuICAgIHJldHVybiBwYWQgKyBzdHJcbiAgfVxufVxuXG4vKipcbiAqIFByaW50ZXIgd2hpY2ggcmlnaHQgYWxpZ25zIHRoZSBjb250ZW50XG4gKi9cblxudmFyIHBhZExlZnQgPSBUYWJsZS5wYWRMZWZ0ID0gbGVmdFBhZGRlcignICcpXG5cbi8qKlxuICogQ3JlYXRlIGEgcHJpbnRlciB3aGljaCBwYWRzIHdpdGggYGNoYCBvbiB0aGUgcmlnaHRcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gY2hcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuXG5UYWJsZS5yaWdodFBhZGRlciA9IHJpZ2h0UGFkZGVyXG5cbmZ1bmN0aW9uIHJpZ2h0UGFkZGVyKGNoKSB7XG4gIHJldHVybiBmdW5jdGlvbiBwYWRSaWdodCh2YWwsIHdpZHRoKSB7XG4gICAgdmFyIHN0ciA9IHN0cmluZyh2YWwpXG4gICAgdmFyIGxlbiA9IGxlbmd0aChzdHIpXG4gICAgdmFyIHBhZCA9IHdpZHRoID4gbGVuID8gQXJyYXkod2lkdGggLSBsZW4gKyAxKS5qb2luKGNoKSA6ICcnXG4gICAgcmV0dXJuIHN0ciArIHBhZFxuICB9XG59XG5cbnZhciBwYWRSaWdodCA9IHJpZ2h0UGFkZGVyKCcgJylcblxuLyoqXG4gKiBDcmVhdGUgYSBwcmludGVyIGZvciBudW1iZXJzXG4gKlxuICogV2lsbCBkbyByaWdodCBhbGlnbm1lbnQgYW5kIG9wdGlvbmFsbHkgZml4IHRoZSBudW1iZXIgb2YgZGlnaXRzIGFmdGVyIGRlY2ltYWwgcG9pbnRcbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gW2RpZ2l0c10gLSBOdW1iZXIgb2YgZGlnaXRzIGZvciBmaXhwb2ludCBub3RhdGlvblxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5cblRhYmxlLm51bWJlciA9IGZ1bmN0aW9uKGRpZ2l0cykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsLCB3aWR0aCkge1xuICAgIGlmICh2YWwgPT0gbnVsbCkgcmV0dXJuICcnXG4gICAgaWYgKHR5cGVvZiB2YWwgIT0gJ251bWJlcicpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJycrdmFsICsgJyBpcyBub3QgYSBudW1iZXInKVxuICAgIHZhciBzdHIgPSBkaWdpdHMgPT0gbnVsbCA/IHZhbCsnJyA6IHZhbC50b0ZpeGVkKGRpZ2l0cylcbiAgICByZXR1cm4gcGFkTGVmdChzdHIsIHdpZHRoKVxuICB9XG59XG5cbmZ1bmN0aW9uIGVhY2gocm93LCBmbikge1xuICBmb3IodmFyIGtleSBpbiByb3cpIHtcbiAgICBpZiAoa2V5ID09ICdfX3ByaW50ZXJzJykgY29udGludWVcbiAgICBmbihrZXksIHJvd1trZXldKVxuICB9XG59XG5cbi8qKlxuICogR2V0IGxpc3Qgb2YgY29sdW1ucyBpbiBwcmludGluZyBvcmRlclxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmdbXX1cbiAqL1xuXG5UYWJsZS5wcm90b3R5cGUuY29sdW1ucyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29scyA9IHt9XG4gIGZvcih2YXIgaSA9IDA7IGkgPCAyOyBpKyspIHsgLy8gZG8gMiB0aW1lc1xuICAgIHRoaXMucm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgICAgdmFyIGlkeCA9IDBcbiAgICAgIGVhY2gocm93LCBmdW5jdGlvbihrZXkpIHtcbiAgICAgICAgaWR4ID0gTWF0aC5tYXgoaWR4LCBjb2xzW2tleV0gfHwgMClcbiAgICAgICAgY29sc1trZXldID0gaWR4XG4gICAgICAgIGlkeCsrXG4gICAgICB9KVxuICAgIH0pXG4gIH1cbiAgcmV0dXJuIE9iamVjdC5rZXlzKGNvbHMpLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBjb2xzW2FdIC0gY29sc1tiXVxuICB9KVxufVxuXG4vKipcbiAqIEZvcm1hdCBqdXN0IHJvd3MsIGkuZS4gcHJpbnQgdGhlIHRhYmxlIHdpdGhvdXQgaGVhZGVycyBhbmQgdG90YWxzXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gU3RyaW5nIHJlcHJlc2VudGFpb24gb2YgdGhlIHRhYmxlXG4gKi9cblxuVGFibGUucHJvdG90eXBlLnByaW50ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBjb2xzID0gdGhpcy5jb2x1bW5zKClcbiAgdmFyIHNlcGFyYXRvciA9IHRoaXMuc2VwYXJhdG9yXG4gIHZhciB3aWR0aHMgPSB7fVxuICB2YXIgb3V0ID0gJydcblxuICAvLyBDYWxjIHdpZHRoc1xuICB0aGlzLnJvd3MuZm9yRWFjaChmdW5jdGlvbihyb3cpIHtcbiAgICBlYWNoKHJvdywgZnVuY3Rpb24oa2V5LCB2YWwpIHtcbiAgICAgIHZhciBzdHIgPSByb3cuX19wcmludGVyc1trZXldLmNhbGwocm93LCB2YWwpXG4gICAgICB3aWR0aHNba2V5XSA9IE1hdGgubWF4KGxlbmd0aChzdHIpLCB3aWR0aHNba2V5XSB8fCAwKVxuICAgIH0pXG4gIH0pXG5cbiAgLy8gTm93IHByaW50XG4gIHRoaXMucm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdykge1xuICAgIHZhciBsaW5lID0gJydcbiAgICBjb2xzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgICB2YXIgd2lkdGggPSB3aWR0aHNba2V5XVxuICAgICAgdmFyIHN0ciA9IHJvdy5oYXNPd25Qcm9wZXJ0eShrZXkpXG4gICAgICAgID8gJycrcm93Ll9fcHJpbnRlcnNba2V5XS5jYWxsKHJvdywgcm93W2tleV0sIHdpZHRoKVxuICAgICAgICA6ICcnXG4gICAgICBsaW5lICs9IHBhZFJpZ2h0KHN0ciwgd2lkdGgpICsgc2VwYXJhdG9yXG4gICAgfSlcbiAgICBsaW5lID0gbGluZS5zbGljZSgwLCAtc2VwYXJhdG9yLmxlbmd0aClcbiAgICBvdXQgKz0gbGluZSArICdcXG4nXG4gIH0pXG5cbiAgcmV0dXJuIG91dFxufVxuXG4vKipcbiAqIEZvcm1hdCB0aGUgdGFibGVcbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5cblRhYmxlLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgY29scyA9IHRoaXMuY29sdW1ucygpXG4gIHZhciBvdXQgPSBuZXcgVGFibGUoKVxuXG4gIC8vIGNvcHkgb3B0aW9uc1xuICBvdXQuc2VwYXJhdG9yID0gdGhpcy5zZXBhcmF0b3JcblxuICAvLyBXcml0ZSBoZWFkZXJcbiAgY29scy5mb3JFYWNoKGZ1bmN0aW9uKGNvbCkge1xuICAgIG91dC5jZWxsKGNvbCwgY29sKVxuICB9KVxuICBvdXQubmV3Um93KClcbiAgb3V0LnB1c2hEZWxpbWV0ZXIoY29scylcblxuICAvLyBXcml0ZSBib2R5XG4gIG91dC5yb3dzID0gb3V0LnJvd3MuY29uY2F0KHRoaXMucm93cylcblxuICAvLyBUb3RhbHNcbiAgaWYgKHRoaXMudG90YWxzICYmIHRoaXMucm93cy5sZW5ndGgpIHtcbiAgICBvdXQucHVzaERlbGltZXRlcihjb2xzKVxuICAgIHRoaXMuZm9yRWFjaFRvdGFsKG91dC5jZWxsLmJpbmQob3V0KSlcbiAgICBvdXQubmV3Um93KClcbiAgfVxuXG4gIHJldHVybiBvdXQucHJpbnQoKVxufVxuXG4vKipcbiAqIFB1c2ggZGVsaW1ldGVyIHJvdyB0byB0aGUgdGFibGUgKHdpdGggZWFjaCBjZWxsIGZpbGxlZCB3aXRoIGRhc2hzIGR1cmluZyBwcmludGluZylcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ1tdfSBbY29sc11cbiAqIEByZXR1cm5zIHtUYWJsZX0gYHRoaXNgXG4gKi9cblxuVGFibGUucHJvdG90eXBlLnB1c2hEZWxpbWV0ZXIgPSBmdW5jdGlvbihjb2xzKSB7XG4gIGNvbHMgPSBjb2xzIHx8IHRoaXMuY29sdW1ucygpXG4gIGNvbHMuZm9yRWFjaChmdW5jdGlvbihjb2wpIHtcbiAgICB0aGlzLmNlbGwoY29sLCB1bmRlZmluZWQsIGxlZnRQYWRkZXIoJy0nKSlcbiAgfSwgdGhpcylcbiAgcmV0dXJuIHRoaXMubmV3Um93KClcbn1cblxuLyoqXG4gKiBDb21wdXRlIGFsbCB0b3RhbHMgYW5kIHlpZWxkIHRoZSByZXN1bHRzIHRvIGBjYmBcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYiAtIENhbGxiYWNrIGZ1bmN0aW9uIHdpdGggc2lnbmF0dXJlIGAoY29sdW1uLCB2YWx1ZSwgcHJpbnRlcilgXG4gKi9cblxuVGFibGUucHJvdG90eXBlLmZvckVhY2hUb3RhbCA9IGZ1bmN0aW9uKGNiKSB7XG4gIGZvcih2YXIga2V5IGluIHRoaXMudG90YWxzKSB7XG4gICAgdmFyIGFnZ3IgPSB0aGlzLnRvdGFsc1trZXldXG4gICAgdmFyIGFjYyA9IGFnZ3IuaW5pdFxuICAgIHZhciBsZW4gPSB0aGlzLnJvd3MubGVuZ3RoXG4gICAgdGhpcy5yb3dzLmZvckVhY2goZnVuY3Rpb24ocm93LCBpZHgpIHtcbiAgICAgIGFjYyA9IGFnZ3IucmVkdWNlLmNhbGwocm93LCBhY2MsIHJvd1trZXldLCBpZHgsIGxlbilcbiAgICB9KVxuICAgIGNiKGtleSwgYWNjLCBhZ2dyLnByaW50ZXIpXG4gIH1cbn1cblxuLyoqXG4gKiBGb3JtYXQgdGhlIHRhYmxlIHNvIHRoYXQgZWFjaCByb3cgcmVwcmVzZW50cyBjb2x1bW4gYW5kIGVhY2ggY29sdW1uIHJlcHJlc2VudHMgcm93XG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXVxuICogQHBhcmFtIHtTdHJpbmd9IFtvcHMuc2VwYXJhdG9yXSAtIENvbHVtbiBzZXBhcmF0aW9uIHN0cmluZ1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMubmFtZVByaW50ZXJdIC0gUHJpbnRlciB0byBmb3JtYXQgY29sdW1uIG5hbWVzXG4gKiBAcmV0dXJucyB7U3RyaW5nfVxuICovXG5cblRhYmxlLnByb3RvdHlwZS5wcmludFRyYW5zcG9zZWQgPSBmdW5jdGlvbihvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9XG4gIHZhciBvdXQgPSBuZXcgVGFibGVcbiAgb3V0LnNlcGFyYXRvciA9IG9wdHMuc2VwYXJhdG9yIHx8IHRoaXMuc2VwYXJhdG9yXG4gIHRoaXMuY29sdW1ucygpLmZvckVhY2goZnVuY3Rpb24oY29sKSB7XG4gICAgb3V0LmNlbGwoMCwgY29sLCBvcHRzLm5hbWVQcmludGVyKVxuICAgIHRoaXMucm93cy5mb3JFYWNoKGZ1bmN0aW9uKHJvdywgaWR4KSB7XG4gICAgICBvdXQuY2VsbChpZHgrMSwgcm93W2NvbF0sIHJvdy5fX3ByaW50ZXJzW2NvbF0pXG4gICAgfSlcbiAgICBvdXQubmV3Um93KClcbiAgfSwgdGhpcylcbiAgcmV0dXJuIG91dC5wcmludCgpXG59XG5cbi8qKlxuICogU29ydCB0aGUgdGFibGVcbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufHN0cmluZ1tdfSBbY21wXSAtIEVpdGhlciBjb21wYXJlIGZ1bmN0aW9uIG9yIGEgbGlzdCBvZiBjb2x1bW5zIHRvIHNvcnQgb25cbiAqIEByZXR1cm5zIHtUYWJsZX0gYHRoaXNgXG4gKi9cblxuVGFibGUucHJvdG90eXBlLnNvcnQgPSBmdW5jdGlvbihjbXApIHtcbiAgaWYgKHR5cGVvZiBjbXAgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHRoaXMucm93cy5zb3J0KGNtcClcbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgdmFyIGtleXMgPSBBcnJheS5pc0FycmF5KGNtcCkgPyBjbXAgOiB0aGlzLmNvbHVtbnMoKVxuXG4gIHZhciBjb21wYXJhdG9ycyA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBvcmRlciA9ICdhc2MnXG4gICAgdmFyIG0gPSAvKC4qKVxcfFxccyooYXNjfGRlcylcXHMqJC8uZXhlYyhrZXkpXG4gICAgaWYgKG0pIHtcbiAgICAgIGtleSA9IG1bMV1cbiAgICAgIG9yZGVyID0gbVsyXVxuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gKGEsIGIpIHtcbiAgICAgIHJldHVybiBvcmRlciA9PSAnYXNjJ1xuICAgICAgICA/IGNvbXBhcmUoYVtrZXldLCBiW2tleV0pXG4gICAgICAgIDogY29tcGFyZShiW2tleV0sIGFba2V5XSlcbiAgICB9XG4gIH0pXG5cbiAgcmV0dXJuIHRoaXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb21wYXJhdG9ycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIG9yZGVyID0gY29tcGFyYXRvcnNbaV0oYSwgYilcbiAgICAgIGlmIChvcmRlciAhPSAwKSByZXR1cm4gb3JkZXJcbiAgICB9XG4gICAgcmV0dXJuIDBcbiAgfSlcbn1cblxuZnVuY3Rpb24gY29tcGFyZShhLCBiKSB7XG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuICBpZiAoYSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gMVxuICBpZiAoYiA9PT0gdW5kZWZpbmVkKSByZXR1cm4gLTFcbiAgaWYgKGEgPT09IG51bGwpIHJldHVybiAxXG4gIGlmIChiID09PSBudWxsKSByZXR1cm4gLTFcbiAgaWYgKGEgPiBiKSByZXR1cm4gMVxuICBpZiAoYSA8IGIpIHJldHVybiAtMVxuICByZXR1cm4gY29tcGFyZShTdHJpbmcoYSksIFN0cmluZyhiKSlcbn1cblxuLyoqXG4gKiBBZGQgYSB0b3RhbCBmb3IgdGhlIGNvbHVtblxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBjb2wgLSBjb2x1bW4gbmFtZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRzXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdHMucmVkdWNlID0gc3VtXSAtIHJlZHVjZShhY2MsIHZhbCwgaWR4LCBsZW5ndGgpIGZ1bmN0aW9uIHRvIGNvbXB1dGUgdGhlIHRvdGFsIHZhbHVlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0cy5wcmludGVyID0gcGFkTGVmdF0gLSBQcmludGVyIHRvIGZvcm1hdCB0aGUgdG90YWwgY2VsbFxuICogQHBhcmFtIHtBbnl9IFtvcHRzLmluaXQgPSAwXSAtIEluaXRpYWwgdmFsdWUgZm9yIHJlZHVjdGlvblxuICogQHJldHVybnMge1RhYmxlfSBgdGhpc2BcbiAqL1xuXG5UYWJsZS5wcm90b3R5cGUudG90YWwgPSBmdW5jdGlvbihjb2wsIG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge31cbiAgdGhpcy50b3RhbHMgPSB0aGlzLnRvdGFscyB8fCB7fVxuICB0aGlzLnRvdGFsc1tjb2xdID0ge1xuICAgIHJlZHVjZTogb3B0cy5yZWR1Y2UgfHwgVGFibGUuYWdnci5zdW0sXG4gICAgcHJpbnRlcjogb3B0cy5wcmludGVyIHx8IHBhZExlZnQsXG4gICAgaW5pdDogb3B0cy5pbml0ID09IG51bGwgPyAwIDogb3B0cy5pbml0XG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuLyoqXG4gKiBQcmVkZWZpbmVkIGhlbHBlcnMgZm9yIHRvdGFsc1xuICovXG5cblRhYmxlLmFnZ3IgPSB7fVxuXG4vKipcbiAqIENyZWF0ZSBhIHByaW50ZXIgd2hpY2ggZm9ybWF0cyB0aGUgdmFsdWUgd2l0aCBgcHJpbnRlcmAsXG4gKiBhZGRzIHRoZSBgcHJlZml4YCB0byBpdCBhbmQgcmlnaHQgYWxpZ25zIHRoZSB3aG9sZSB0aGluZ1xuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBwcmVmaXhcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByaW50ZXJcbiAqIEByZXR1cm5zIHtwcmludGVyfVxuICovXG5cblRhYmxlLmFnZ3IucHJpbnRlciA9IGZ1bmN0aW9uKHByZWZpeCwgcHJpbnRlcikge1xuICBwcmludGVyID0gcHJpbnRlciB8fCBzdHJpbmdcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbCwgd2lkdGgpIHtcbiAgICByZXR1cm4gcGFkTGVmdChwcmVmaXggKyBwcmludGVyKHZhbCksIHdpZHRoKVxuICB9XG59XG5cbi8qKlxuICogU3VtIHJlZHVjdGlvblxuICovXG5cblRhYmxlLmFnZ3Iuc3VtID0gZnVuY3Rpb24oYWNjLCB2YWwpIHtcbiAgcmV0dXJuIGFjYyArIHZhbFxufVxuXG4vKipcbiAqIEF2ZXJhZ2UgcmVkdWN0aW9uXG4gKi9cblxuVGFibGUuYWdnci5hdmcgPSBmdW5jdGlvbihhY2MsIHZhbCwgaWR4LCBsZW4pIHtcbiAgYWNjID0gYWNjICsgdmFsXG4gIHJldHVybiBpZHggKyAxID09IGxlbiA/IGFjYy9sZW4gOiBhY2Ncbn1cblxuLyoqXG4gKiBQcmludCB0aGUgYXJyYXkgb3Igb2JqZWN0XG4gKlxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IG9iaiAtIE9iamVjdCB0byBwcmludFxuICogQHBhcmFtIHtGdW5jdGlvbnxPYmplY3R9IFtmb3JtYXRdIC0gRm9ybWF0IG9wdGlvbnNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYl0gLSBUYWJsZSBwb3N0IHByb2Nlc3NpbmcgYW5kIGZvcm1hdGluZ1xuICogQHJldHVybnMge1N0cmluZ31cbiAqL1xuXG5UYWJsZS5wcmludCA9IGZ1bmN0aW9uKG9iaiwgZm9ybWF0LCBjYikge1xuICB2YXIgb3B0cyA9IGZvcm1hdCB8fCB7fVxuXG4gIGZvcm1hdCA9IHR5cGVvZiBmb3JtYXQgPT0gJ2Z1bmN0aW9uJ1xuICAgID8gZm9ybWF0XG4gICAgOiBmdW5jdGlvbihvYmosIGNlbGwpIHtcbiAgICAgIGZvcih2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAoIW9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSBjb250aW51ZVxuICAgICAgICB2YXIgcGFyYW1zID0gb3B0c1trZXldIHx8IHt9XG4gICAgICAgIGNlbGwocGFyYW1zLm5hbWUgfHwga2V5LCBvYmpba2V5XSwgcGFyYW1zLnByaW50ZXIpXG4gICAgICB9XG4gICAgfVxuXG4gIHZhciB0ID0gbmV3IFRhYmxlXG4gIHZhciBjZWxsID0gdC5jZWxsLmJpbmQodClcblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgY2IgPSBjYiB8fCBmdW5jdGlvbih0KSB7IHJldHVybiB0LnRvU3RyaW5nKCkgfVxuICAgIG9iai5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIGZvcm1hdChpdGVtLCBjZWxsKVxuICAgICAgdC5uZXdSb3coKVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgY2IgPSBjYiB8fCBmdW5jdGlvbih0KSB7IHJldHVybiB0LnByaW50VHJhbnNwb3NlZCh7c2VwYXJhdG9yOiAnIDogJ30pIH1cbiAgICBmb3JtYXQob2JqLCBjZWxsKVxuICAgIHQubmV3Um93KClcbiAgfVxuXG4gIHJldHVybiBjYih0KVxufVxuXG4vKipcbiAqIFNhbWUgYXMgYFRhYmxlLnByaW50KClgIGJ1dCB5aWVsZHMgdGhlIHJlc3VsdCB0byBgY29uc29sZS5sb2coKWBcbiAqL1xuXG5UYWJsZS5sb2cgPSBmdW5jdGlvbihvYmosIGZvcm1hdCwgY2IpIHtcbiAgY29uc29sZS5sb2coVGFibGUucHJpbnQob2JqLCBmb3JtYXQsIGNiKSlcbn1cblxuLyoqXG4gKiBTYW1lIGFzIGAudG9TdHJpbmcoKWAgYnV0IHlpZWxkcyB0aGUgcmVzdWx0IHRvIGBjb25zb2xlLmxvZygpYFxuICovXG5cblRhYmxlLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbigpIHtcbiAgY29uc29sZS5sb2codGhpcy50b1N0cmluZygpKVxufVxuIiwibW9kdWxlLmV4cG9ydHMgPSBbXG4gICAgWyAweDAzMDAsIDB4MDM2RiBdLCBbIDB4MDQ4MywgMHgwNDg2IF0sIFsgMHgwNDg4LCAweDA0ODkgXSxcbiAgICBbIDB4MDU5MSwgMHgwNUJEIF0sIFsgMHgwNUJGLCAweDA1QkYgXSwgWyAweDA1QzEsIDB4MDVDMiBdLFxuICAgIFsgMHgwNUM0LCAweDA1QzUgXSwgWyAweDA1QzcsIDB4MDVDNyBdLCBbIDB4MDYwMCwgMHgwNjAzIF0sXG4gICAgWyAweDA2MTAsIDB4MDYxNSBdLCBbIDB4MDY0QiwgMHgwNjVFIF0sIFsgMHgwNjcwLCAweDA2NzAgXSxcbiAgICBbIDB4MDZENiwgMHgwNkU0IF0sIFsgMHgwNkU3LCAweDA2RTggXSwgWyAweDA2RUEsIDB4MDZFRCBdLFxuICAgIFsgMHgwNzBGLCAweDA3MEYgXSwgWyAweDA3MTEsIDB4MDcxMSBdLCBbIDB4MDczMCwgMHgwNzRBIF0sXG4gICAgWyAweDA3QTYsIDB4MDdCMCBdLCBbIDB4MDdFQiwgMHgwN0YzIF0sIFsgMHgwOTAxLCAweDA5MDIgXSxcbiAgICBbIDB4MDkzQywgMHgwOTNDIF0sIFsgMHgwOTQxLCAweDA5NDggXSwgWyAweDA5NEQsIDB4MDk0RCBdLFxuICAgIFsgMHgwOTUxLCAweDA5NTQgXSwgWyAweDA5NjIsIDB4MDk2MyBdLCBbIDB4MDk4MSwgMHgwOTgxIF0sXG4gICAgWyAweDA5QkMsIDB4MDlCQyBdLCBbIDB4MDlDMSwgMHgwOUM0IF0sIFsgMHgwOUNELCAweDA5Q0QgXSxcbiAgICBbIDB4MDlFMiwgMHgwOUUzIF0sIFsgMHgwQTAxLCAweDBBMDIgXSwgWyAweDBBM0MsIDB4MEEzQyBdLFxuICAgIFsgMHgwQTQxLCAweDBBNDIgXSwgWyAweDBBNDcsIDB4MEE0OCBdLCBbIDB4MEE0QiwgMHgwQTREIF0sXG4gICAgWyAweDBBNzAsIDB4MEE3MSBdLCBbIDB4MEE4MSwgMHgwQTgyIF0sIFsgMHgwQUJDLCAweDBBQkMgXSxcbiAgICBbIDB4MEFDMSwgMHgwQUM1IF0sIFsgMHgwQUM3LCAweDBBQzggXSwgWyAweDBBQ0QsIDB4MEFDRCBdLFxuICAgIFsgMHgwQUUyLCAweDBBRTMgXSwgWyAweDBCMDEsIDB4MEIwMSBdLCBbIDB4MEIzQywgMHgwQjNDIF0sXG4gICAgWyAweDBCM0YsIDB4MEIzRiBdLCBbIDB4MEI0MSwgMHgwQjQzIF0sIFsgMHgwQjRELCAweDBCNEQgXSxcbiAgICBbIDB4MEI1NiwgMHgwQjU2IF0sIFsgMHgwQjgyLCAweDBCODIgXSwgWyAweDBCQzAsIDB4MEJDMCBdLFxuICAgIFsgMHgwQkNELCAweDBCQ0QgXSwgWyAweDBDM0UsIDB4MEM0MCBdLCBbIDB4MEM0NiwgMHgwQzQ4IF0sXG4gICAgWyAweDBDNEEsIDB4MEM0RCBdLCBbIDB4MEM1NSwgMHgwQzU2IF0sIFsgMHgwQ0JDLCAweDBDQkMgXSxcbiAgICBbIDB4MENCRiwgMHgwQ0JGIF0sIFsgMHgwQ0M2LCAweDBDQzYgXSwgWyAweDBDQ0MsIDB4MENDRCBdLFxuICAgIFsgMHgwQ0UyLCAweDBDRTMgXSwgWyAweDBENDEsIDB4MEQ0MyBdLCBbIDB4MEQ0RCwgMHgwRDREIF0sXG4gICAgWyAweDBEQ0EsIDB4MERDQSBdLCBbIDB4MEREMiwgMHgwREQ0IF0sIFsgMHgwREQ2LCAweDBERDYgXSxcbiAgICBbIDB4MEUzMSwgMHgwRTMxIF0sIFsgMHgwRTM0LCAweDBFM0EgXSwgWyAweDBFNDcsIDB4MEU0RSBdLFxuICAgIFsgMHgwRUIxLCAweDBFQjEgXSwgWyAweDBFQjQsIDB4MEVCOSBdLCBbIDB4MEVCQiwgMHgwRUJDIF0sXG4gICAgWyAweDBFQzgsIDB4MEVDRCBdLCBbIDB4MEYxOCwgMHgwRjE5IF0sIFsgMHgwRjM1LCAweDBGMzUgXSxcbiAgICBbIDB4MEYzNywgMHgwRjM3IF0sIFsgMHgwRjM5LCAweDBGMzkgXSwgWyAweDBGNzEsIDB4MEY3RSBdLFxuICAgIFsgMHgwRjgwLCAweDBGODQgXSwgWyAweDBGODYsIDB4MEY4NyBdLCBbIDB4MEY5MCwgMHgwRjk3IF0sXG4gICAgWyAweDBGOTksIDB4MEZCQyBdLCBbIDB4MEZDNiwgMHgwRkM2IF0sIFsgMHgxMDJELCAweDEwMzAgXSxcbiAgICBbIDB4MTAzMiwgMHgxMDMyIF0sIFsgMHgxMDM2LCAweDEwMzcgXSwgWyAweDEwMzksIDB4MTAzOSBdLFxuICAgIFsgMHgxMDU4LCAweDEwNTkgXSwgWyAweDExNjAsIDB4MTFGRiBdLCBbIDB4MTM1RiwgMHgxMzVGIF0sXG4gICAgWyAweDE3MTIsIDB4MTcxNCBdLCBbIDB4MTczMiwgMHgxNzM0IF0sIFsgMHgxNzUyLCAweDE3NTMgXSxcbiAgICBbIDB4MTc3MiwgMHgxNzczIF0sIFsgMHgxN0I0LCAweDE3QjUgXSwgWyAweDE3QjcsIDB4MTdCRCBdLFxuICAgIFsgMHgxN0M2LCAweDE3QzYgXSwgWyAweDE3QzksIDB4MTdEMyBdLCBbIDB4MTdERCwgMHgxN0REIF0sXG4gICAgWyAweDE4MEIsIDB4MTgwRCBdLCBbIDB4MThBOSwgMHgxOEE5IF0sIFsgMHgxOTIwLCAweDE5MjIgXSxcbiAgICBbIDB4MTkyNywgMHgxOTI4IF0sIFsgMHgxOTMyLCAweDE5MzIgXSwgWyAweDE5MzksIDB4MTkzQiBdLFxuICAgIFsgMHgxQTE3LCAweDFBMTggXSwgWyAweDFCMDAsIDB4MUIwMyBdLCBbIDB4MUIzNCwgMHgxQjM0IF0sXG4gICAgWyAweDFCMzYsIDB4MUIzQSBdLCBbIDB4MUIzQywgMHgxQjNDIF0sIFsgMHgxQjQyLCAweDFCNDIgXSxcbiAgICBbIDB4MUI2QiwgMHgxQjczIF0sIFsgMHgxREMwLCAweDFEQ0EgXSwgWyAweDFERkUsIDB4MURGRiBdLFxuICAgIFsgMHgyMDBCLCAweDIwMEYgXSwgWyAweDIwMkEsIDB4MjAyRSBdLCBbIDB4MjA2MCwgMHgyMDYzIF0sXG4gICAgWyAweDIwNkEsIDB4MjA2RiBdLCBbIDB4MjBEMCwgMHgyMEVGIF0sIFsgMHgzMDJBLCAweDMwMkYgXSxcbiAgICBbIDB4MzA5OSwgMHgzMDlBIF0sIFsgMHhBODA2LCAweEE4MDYgXSwgWyAweEE4MEIsIDB4QTgwQiBdLFxuICAgIFsgMHhBODI1LCAweEE4MjYgXSwgWyAweEZCMUUsIDB4RkIxRSBdLCBbIDB4RkUwMCwgMHhGRTBGIF0sXG4gICAgWyAweEZFMjAsIDB4RkUyMyBdLCBbIDB4RkVGRiwgMHhGRUZGIF0sIFsgMHhGRkY5LCAweEZGRkIgXSxcbiAgICBbIDB4MTBBMDEsIDB4MTBBMDMgXSwgWyAweDEwQTA1LCAweDEwQTA2IF0sIFsgMHgxMEEwQywgMHgxMEEwRiBdLFxuICAgIFsgMHgxMEEzOCwgMHgxMEEzQSBdLCBbIDB4MTBBM0YsIDB4MTBBM0YgXSwgWyAweDFEMTY3LCAweDFEMTY5IF0sXG4gICAgWyAweDFEMTczLCAweDFEMTgyIF0sIFsgMHgxRDE4NSwgMHgxRDE4QiBdLCBbIDB4MUQxQUEsIDB4MUQxQUQgXSxcbiAgICBbIDB4MUQyNDIsIDB4MUQyNDQgXSwgWyAweEUwMDAxLCAweEUwMDAxIF0sIFsgMHhFMDAyMCwgMHhFMDA3RiBdLFxuICAgIFsgMHhFMDEwMCwgMHhFMDFFRiBdXG5dXG4iLCJcInVzZSBzdHJpY3RcIlxuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCdkZWZhdWx0cycpXG52YXIgY29tYmluaW5nID0gcmVxdWlyZSgnLi9jb21iaW5pbmcnKVxuXG52YXIgREVGQVVMVFMgPSB7XG4gIG51bDogMCxcbiAgY29udHJvbDogMFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHdjd2lkdGgoc3RyKSB7XG4gIHJldHVybiB3Y3N3aWR0aChzdHIsIERFRkFVTFRTKVxufVxuXG5tb2R1bGUuZXhwb3J0cy5jb25maWcgPSBmdW5jdGlvbihvcHRzKSB7XG4gIG9wdHMgPSBkZWZhdWx0cyhvcHRzIHx8IHt9LCBERUZBVUxUUylcbiAgcmV0dXJuIGZ1bmN0aW9uIHdjd2lkdGgoc3RyKSB7XG4gICAgcmV0dXJuIHdjc3dpZHRoKHN0ciwgb3B0cylcbiAgfVxufVxuXG4vKlxuICogIFRoZSBmb2xsb3dpbmcgZnVuY3Rpb25zIGRlZmluZSB0aGUgY29sdW1uIHdpZHRoIG9mIGFuIElTTyAxMDY0NlxuICogIGNoYXJhY3RlciBhcyBmb2xsb3dzOlxuICogIC0gVGhlIG51bGwgY2hhcmFjdGVyIChVKzAwMDApIGhhcyBhIGNvbHVtbiB3aWR0aCBvZiAwLlxuICogIC0gT3RoZXIgQzAvQzEgY29udHJvbCBjaGFyYWN0ZXJzIGFuZCBERUwgd2lsbCBsZWFkIHRvIGEgcmV0dXJuIHZhbHVlXG4gKiAgICBvZiAtMS5cbiAqICAtIE5vbi1zcGFjaW5nIGFuZCBlbmNsb3NpbmcgY29tYmluaW5nIGNoYXJhY3RlcnMgKGdlbmVyYWwgY2F0ZWdvcnlcbiAqICAgIGNvZGUgTW4gb3IgTWUgaW4gdGhlXG4gKiAgICBVbmljb2RlIGRhdGFiYXNlKSBoYXZlIGEgY29sdW1uIHdpZHRoIG9mIDAuXG4gKiAgLSBTT0ZUIEhZUEhFTiAoVSswMEFEKSBoYXMgYSBjb2x1bW4gd2lkdGggb2YgMS5cbiAqICAtIE90aGVyIGZvcm1hdCBjaGFyYWN0ZXJzIChnZW5lcmFsIGNhdGVnb3J5IGNvZGUgQ2YgaW4gdGhlIFVuaWNvZGVcbiAqICAgIGRhdGFiYXNlKSBhbmQgWkVSTyBXSURUSFxuICogICAgU1BBQ0UgKFUrMjAwQikgaGF2ZSBhIGNvbHVtbiB3aWR0aCBvZiAwLlxuICogIC0gSGFuZ3VsIEphbW8gbWVkaWFsIHZvd2VscyBhbmQgZmluYWwgY29uc29uYW50cyAoVSsxMTYwLVUrMTFGRilcbiAqICAgIGhhdmUgYSBjb2x1bW4gd2lkdGggb2YgMC5cbiAqICAtIFNwYWNpbmcgY2hhcmFjdGVycyBpbiB0aGUgRWFzdCBBc2lhbiBXaWRlIChXKSBvciBFYXN0IEFzaWFuXG4gKiAgICBGdWxsLXdpZHRoIChGKSBjYXRlZ29yeSBhc1xuICogICAgZGVmaW5lZCBpbiBVbmljb2RlIFRlY2huaWNhbCBSZXBvcnQgIzExIGhhdmUgYSBjb2x1bW4gd2lkdGggb2YgMi5cbiAqICAtIEFsbCByZW1haW5pbmcgY2hhcmFjdGVycyAoaW5jbHVkaW5nIGFsbCBwcmludGFibGUgSVNPIDg4NTktMSBhbmRcbiAqICAgIFdHTDQgY2hhcmFjdGVycywgVW5pY29kZSBjb250cm9sIGNoYXJhY3RlcnMsIGV0Yy4pIGhhdmUgYSBjb2x1bW5cbiAqICAgIHdpZHRoIG9mIDEuXG4gKiAgVGhpcyBpbXBsZW1lbnRhdGlvbiBhc3N1bWVzIHRoYXQgY2hhcmFjdGVycyBhcmUgZW5jb2RlZCBpbiBJU08gMTA2NDYuXG4qL1xuXG5mdW5jdGlvbiB3Y3N3aWR0aChzdHIsIG9wdHMpIHtcbiAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSByZXR1cm4gd2N3aWR0aChzdHIsIG9wdHMpXG5cbiAgdmFyIHMgPSAwXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIG4gPSB3Y3dpZHRoKHN0ci5jaGFyQ29kZUF0KGkpLCBvcHRzKVxuICAgIGlmIChuIDwgMCkgcmV0dXJuIC0xXG4gICAgcyArPSBuXG4gIH1cblxuICByZXR1cm4gc1xufVxuXG5mdW5jdGlvbiB3Y3dpZHRoKHVjcywgb3B0cykge1xuICAvLyB0ZXN0IGZvciA4LWJpdCBjb250cm9sIGNoYXJhY3RlcnNcbiAgaWYgKHVjcyA9PT0gMCkgcmV0dXJuIG9wdHMubnVsXG4gIGlmICh1Y3MgPCAzMiB8fCAodWNzID49IDB4N2YgJiYgdWNzIDwgMHhhMCkpIHJldHVybiBvcHRzLmNvbnRyb2xcblxuICAvLyBiaW5hcnkgc2VhcmNoIGluIHRhYmxlIG9mIG5vbi1zcGFjaW5nIGNoYXJhY3RlcnNcbiAgaWYgKGJpc2VhcmNoKHVjcykpIHJldHVybiAwXG5cbiAgLy8gaWYgd2UgYXJyaXZlIGhlcmUsIHVjcyBpcyBub3QgYSBjb21iaW5pbmcgb3IgQzAvQzEgY29udHJvbCBjaGFyYWN0ZXJcbiAgcmV0dXJuIDEgK1xuICAgICAgKHVjcyA+PSAweDExMDAgJiZcbiAgICAgICAodWNzIDw9IDB4MTE1ZiB8fCAgICAgICAgICAgICAgICAgICAgICAgLy8gSGFuZ3VsIEphbW8gaW5pdC4gY29uc29uYW50c1xuICAgICAgICB1Y3MgPT0gMHgyMzI5IHx8IHVjcyA9PSAweDIzMmEgfHxcbiAgICAgICAgKHVjcyA+PSAweDJlODAgJiYgdWNzIDw9IDB4YTRjZiAmJlxuICAgICAgICAgdWNzICE9IDB4MzAzZikgfHwgICAgICAgICAgICAgICAgICAgICAvLyBDSksgLi4uIFlpXG4gICAgICAgICh1Y3MgPj0gMHhhYzAwICYmIHVjcyA8PSAweGQ3YTMpIHx8ICAgIC8vIEhhbmd1bCBTeWxsYWJsZXNcbiAgICAgICAgKHVjcyA+PSAweGY5MDAgJiYgdWNzIDw9IDB4ZmFmZikgfHwgICAgLy8gQ0pLIENvbXBhdGliaWxpdHkgSWRlb2dyYXBoc1xuICAgICAgICAodWNzID49IDB4ZmUxMCAmJiB1Y3MgPD0gMHhmZTE5KSB8fCAgICAvLyBWZXJ0aWNhbCBmb3Jtc1xuICAgICAgICAodWNzID49IDB4ZmUzMCAmJiB1Y3MgPD0gMHhmZTZmKSB8fCAgICAvLyBDSksgQ29tcGF0aWJpbGl0eSBGb3Jtc1xuICAgICAgICAodWNzID49IDB4ZmYwMCAmJiB1Y3MgPD0gMHhmZjYwKSB8fCAgICAvLyBGdWxsd2lkdGggRm9ybXNcbiAgICAgICAgKHVjcyA+PSAweGZmZTAgJiYgdWNzIDw9IDB4ZmZlNikgfHxcbiAgICAgICAgKHVjcyA+PSAweDIwMDAwICYmIHVjcyA8PSAweDJmZmZkKSB8fFxuICAgICAgICAodWNzID49IDB4MzAwMDAgJiYgdWNzIDw9IDB4M2ZmZmQpKSk7XG59XG5cbmZ1bmN0aW9uIGJpc2VhcmNoKHVjcykge1xuICB2YXIgbWluID0gMFxuICB2YXIgbWF4ID0gY29tYmluaW5nLmxlbmd0aCAtIDFcbiAgdmFyIG1pZFxuXG4gIGlmICh1Y3MgPCBjb21iaW5pbmdbMF1bMF0gfHwgdWNzID4gY29tYmluaW5nW21heF1bMV0pIHJldHVybiBmYWxzZVxuXG4gIHdoaWxlIChtYXggPj0gbWluKSB7XG4gICAgbWlkID0gTWF0aC5mbG9vcigobWluICsgbWF4KSAvIDIpXG4gICAgaWYgKHVjcyA+IGNvbWJpbmluZ1ttaWRdWzFdKSBtaW4gPSBtaWQgKyAxXG4gICAgZWxzZSBpZiAodWNzIDwgY29tYmluaW5nW21pZF1bMF0pIG1heCA9IG1pZCAtIDFcbiAgICBlbHNlIHJldHVybiB0cnVlXG4gIH1cblxuICByZXR1cm4gZmFsc2Vcbn1cbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdGlmKF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0pIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdC8vIG5vIG1vZHVsZS5pZCBuZWVkZWRcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgZGVmaW5pdGlvbikge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmosIHByb3ApIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApOyB9IiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBTY29yZSB7XG4gICAgc3RhdGljIE1BWF9JTlQgPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICBzY29yZV8xID0gU2NvcmUuTUFYX0lOVDtcbiAgICBzY29yZV8yID0gU2NvcmUuTUFYX0lOVDtcblxuICAgIGNvbnN0cnVjdG9yKHNjb3JlXzE/OiBudW1iZXIsIHNjb3JlXzI/OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzY29yZV8xICE9ICd1bmRlZmluZWQnKSB0aGlzLnNjb3JlXzEgPSBzY29yZV8xO1xuICAgICAgICBpZiAodHlwZW9mIHNjb3JlXzIgIT0gJ3VuZGVmaW5lZCcpIHRoaXMuc2NvcmVfMiA9IHNjb3JlXzI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTG93ZXIgaXMgYmV0dGVyXG4gICAgICovXG4gICAgdmFsdWVPZigpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLnNjb3JlXzEgKyB0aGlzLnNjb3JlXzIpO1xuICAgIH1cblxuICAgIGFzc2lnbihvdGhlcikge1xuICAgICAgICB0aGlzLnNjb3JlXzEgPSBvdGhlci5zY29yZV8xO1xuICAgICAgICB0aGlzLnNjb3JlXzIgPSBvdGhlci5zY29yZV8yO1xuICAgIH1cblxuICAgIGlzQmxhbmsoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjb3JlXzEgPT09IFNjb3JlLk1BWF9JTlQ7XG4gICAgfVxuXG4gICAgZGVjcmVhc2VCeShkZWx0YSkge1xuICAgICAgICB0aGlzLnNjb3JlXzEgKz0gZGVsdGE7XG4gICAgICAgIHRoaXMuc2NvcmVfMiArPSBkZWx0YTtcbiAgICB9XG59IiwiaW1wb3J0IHsgRnJlZVNwYWNlQm94IH0gZnJvbSAnLi4vQmluJztcbmltcG9ydCBCb3ggZnJvbSAnLi4vQm94JztcbmltcG9ydCBTY29yZSBmcm9tICcuLi9TY29yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2Uge1xuXHRmaW5kUG9zaXRpb25Gb3JOZXdOb2RlKGJveDogQm94LCBmcmVlUmVjdHM6IEZyZWVTcGFjZUJveFtdKSB7XG5cdFx0bGV0IGJlc3RTY29yZSA9IG5ldyBTY29yZSgpO1xuXHRcdGxldCB3aWR0aCA9IGJveC53aWR0aDtcblx0XHRsZXQgaGVpZ2h0ID0gYm94LmhlaWdodDtcblxuXHRcdGZyZWVSZWN0cy5mb3JFYWNoKChmcmVlUmVjdCkgPT4ge1xuXHRcdFx0dGhpcy50cnlQbGFjZVJlY3RJbihmcmVlUmVjdCwgYm94LCB3aWR0aCwgaGVpZ2h0LCBiZXN0U2NvcmUpO1xuXHRcdFx0aWYgKCFib3guY29uc3RyYWluUm90YXRpb24pIHtcblx0XHRcdFx0dGhpcy50cnlQbGFjZVJlY3RJbihmcmVlUmVjdCwgYm94LCBoZWlnaHQsIHdpZHRoLCBiZXN0U2NvcmUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0cmV0dXJuIGJlc3RTY29yZTtcblx0fVxuXG5cdHRyeVBsYWNlUmVjdEluKFxuXHRcdGZyZWVSZWN0OiBGcmVlU3BhY2VCb3gsXG5cdFx0Ym94OiBCb3gsXG5cdFx0cmVjdFdpZHRoLFxuXHRcdHJlY3RIZWlnaHQsXG5cdFx0YmVzdFNjb3JlXG5cdCkge1xuXHRcdGlmIChmcmVlUmVjdC53aWR0aCA+PSByZWN0V2lkdGggJiYgZnJlZVJlY3QuaGVpZ2h0ID49IHJlY3RIZWlnaHQpIHtcblx0XHRcdGxldCBzY29yZSA9IHRoaXMuY2FsY3VsYXRlU2NvcmUoZnJlZVJlY3QsIHJlY3RXaWR0aCwgcmVjdEhlaWdodCk7XG5cdFx0XHRpZiAoc2NvcmUgPCBiZXN0U2NvcmUpIHtcblx0XHRcdFx0Ym94LnggPSBmcmVlUmVjdC54O1xuXHRcdFx0XHRib3gueSA9IGZyZWVSZWN0Lnk7XG5cdFx0XHRcdGJveC53aWR0aCA9IHJlY3RXaWR0aDtcblx0XHRcdFx0Ym94LmhlaWdodCA9IHJlY3RIZWlnaHQ7XG5cdFx0XHRcdGJveC5wYWNrZWQgPSB0cnVlO1xuXHRcdFx0XHRiZXN0U2NvcmUuYXNzaWduKHNjb3JlKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRjYWxjdWxhdGVTY29yZShfZnJlZVJlY3QsIF9yZWN0V2lkdGgsIF9yZWN0SGVpZ2h0KTogU2NvcmUge1xuXHRcdHRocm93ICdOb3RJbXBsZW1lbnRlZEVycm9yJztcblx0fVxufSIsImltcG9ydCBCYXNlIGZyb20gJy4vQmFzZSc7XG5pbXBvcnQgU2NvcmUgZnJvbSAnLi4vU2NvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCZXN0U2hvcnRTaWRlRml0IGV4dGVuZHMgQmFzZSB7XG5cbiAgY2FsY3VsYXRlU2NvcmUoZnJlZVJlY3QsIHJlY3RXaWR0aCwgcmVjdEhlaWdodCkge1xuICAgIGxldCBsZWZ0T3Zlckhvcml6ID0gTWF0aC5hYnMoZnJlZVJlY3Qud2lkdGggLSByZWN0V2lkdGgpO1xuICAgIGxldCBsZWZ0T3ZlclZlcnQgPSBNYXRoLmFicyhmcmVlUmVjdC5oZWlnaHQgLSByZWN0SGVpZ2h0KTtcbiAgICBsZXQgYXJncyA9IFtsZWZ0T3Zlckhvcml6LCBsZWZ0T3ZlclZlcnRdLnNvcnQoKGEsIGIpID0+IGEgLSBiKTtcbiAgICBsZXQgc2NvcmUgPSBuZXcgU2NvcmUoYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgcmV0dXJuIHNjb3JlO1xuICB9XG5cbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBCb3gge1xuXHR3aWR0aDogbnVtYmVyID0gMDtcblx0aGVpZ2h0OiBudW1iZXIgPSAwO1xuXHR4ID0gMDtcbiAgICB5ID0gMDtcbiAgICBjb25zdHJhaW5Sb3RhdGlvbiA9IGZhbHNlO1xuICAgIHBhY2tlZCA9IGZhbHNlO1xuXG5cdGNvbnN0cnVjdG9yKHdpZHRoOm51bWJlciAsIGhlaWdodDogbnVtYmVyLCBjb25zdHJhaW5Sb3RhdGlvbiA9IGZhbHNlKSB7XG5cdFx0dGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5jb25zdHJhaW5Sb3RhdGlvbiA9IGNvbnN0cmFpblJvdGF0aW9uO1xuXHR9XG59IiwiaW1wb3J0IEJlc3RTaG9ydFNpZGVGaXQgZnJvbSAnLi9oZXVyaXN0aWNzL0Jlc3RTaG9ydFNpZGVGaXQnO1xuaW1wb3J0IEJveCBmcm9tICcuL0JveCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJpbiB7XG5cdHdpZHRoOiBudW1iZXIgPSAwO1xuXHRoZWlnaHQ6IG51bWJlcj0gMDtcblx0Ym94ZXM6IEJveFtdID0gW107XG5cdGhldXJpc3RpYzogYW55ID0gbnVsbDtcblx0ZnJlZVJlY3RhbmdsZXM6IEZyZWVTcGFjZUJveFtdID0gW107XG5cblx0Y29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGhldXJpc3RpYykge1xuXHRcdHRoaXMud2lkdGggPSB3aWR0aDtcblx0XHR0aGlzLmhlaWdodCA9IGhlaWdodDtcblx0XHR0aGlzLmZyZWVSZWN0YW5nbGVzID0gW25ldyBGcmVlU3BhY2VCb3god2lkdGgsIGhlaWdodCldO1xuXHRcdHRoaXMuaGV1cmlzdGljID0gaGV1cmlzdGljIHx8IG5ldyBCZXN0U2hvcnRTaWRlRml0KCk7XG5cdH1cblxuXHRnZXQgYXJlYSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodDtcblx0fVxuXG5cdGdldCBlZmZpY2llbmN5KCkge1xuXHRcdGxldCBib3hlc0FyZWEgPSAwO1xuXHRcdHRoaXMuYm94ZXMuZm9yRWFjaCgoYm94KSA9PiB7XG5cdFx0XHRib3hlc0FyZWEgKz0gYm94LndpZHRoICogYm94LmhlaWdodDtcblx0XHR9KTtcblx0XHRyZXR1cm4gKGJveGVzQXJlYSAqIDEwMCkgLyB0aGlzLmFyZWE7XG5cdH1cblxuXHRnZXQgbGFiZWwoKSB7XG5cdFx0cmV0dXJuIGAke3RoaXMud2lkdGh9eCR7dGhpcy5oZWlnaHR9ICR7dGhpcy5lZmZpY2llbmN5fSVgO1xuXHR9XG5cblx0aW5zZXJ0KGJveDogQm94KSB7XG5cdFx0aWYgKGJveC5wYWNrZWQpIHJldHVybiBmYWxzZTtcblxuXHRcdHRoaXMuaGV1cmlzdGljLmZpbmRQb3NpdGlvbkZvck5ld05vZGUoYm94LCB0aGlzLmZyZWVSZWN0YW5nbGVzKTtcblx0XHRpZiAoIWJveC5wYWNrZWQpIHJldHVybiBmYWxzZTtcblxuXHRcdGxldCBudW1SZWN0YW5nbGVzVG9Qcm9jZXNzID0gdGhpcy5mcmVlUmVjdGFuZ2xlcy5sZW5ndGg7XG5cdFx0bGV0IGkgPSAwO1xuXG5cdFx0d2hpbGUgKGkgPCBudW1SZWN0YW5nbGVzVG9Qcm9jZXNzKSB7XG5cdFx0XHRpZiAodGhpcy5zcGxpdEZyZWVOb2RlKHRoaXMuZnJlZVJlY3RhbmdsZXNbaV0sIGJveCkpIHtcblx0XHRcdFx0dGhpcy5mcmVlUmVjdGFuZ2xlcy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdG51bVJlY3RhbmdsZXNUb1Byb2Nlc3MtLTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGkrKztcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aGlzLnBydW5lRnJlZUxpc3QoKTtcblx0XHR0aGlzLmJveGVzLnB1c2goYm94KTtcblxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0c2NvcmVGb3IoYm94OiBCb3gpIHtcblx0XHRsZXQgY29weUJveCA9IG5ldyBCb3goYm94LndpZHRoLCBib3guaGVpZ2h0LCBib3guY29uc3RyYWluUm90YXRpb24pO1xuXHRcdGxldCBzY29yZSA9IHRoaXMuaGV1cmlzdGljLmZpbmRQb3NpdGlvbkZvck5ld05vZGUoXG5cdFx0XHRjb3B5Qm94LFxuXHRcdFx0dGhpcy5mcmVlUmVjdGFuZ2xlc1xuXHRcdCk7XG5cdFx0cmV0dXJuIHNjb3JlO1xuXHR9XG5cblx0aXNMYXJnZXJUaGFuKGJveDogQm94KSB7XG5cdFx0cmV0dXJuIChcblx0XHRcdCh0aGlzLndpZHRoID49IGJveC53aWR0aCAmJiB0aGlzLmhlaWdodCA+PSBib3guaGVpZ2h0KSB8fFxuXHRcdFx0KHRoaXMuaGVpZ2h0ID49IGJveC53aWR0aCAmJiB0aGlzLndpZHRoID49IGJveC5oZWlnaHQpXG5cdFx0KTtcblx0fVxuXG5cdHNwbGl0RnJlZU5vZGUoZnJlZU5vZGUsIHVzZWROb2RlKSB7XG5cdFx0Ly8gVGVzdCB3aXRoIFNBVCBpZiB0aGUgcmVjdGFuZ2xlcyBldmVuIGludGVyc2VjdC5cblx0XHRpZiAoXG5cdFx0XHR1c2VkTm9kZS54ID49IGZyZWVOb2RlLnggKyBmcmVlTm9kZS53aWR0aCB8fFxuXHRcdFx0dXNlZE5vZGUueCArIHVzZWROb2RlLndpZHRoIDw9IGZyZWVOb2RlLnggfHxcblx0XHRcdHVzZWROb2RlLnkgPj0gZnJlZU5vZGUueSArIGZyZWVOb2RlLmhlaWdodCB8fFxuXHRcdFx0dXNlZE5vZGUueSArIHVzZWROb2RlLmhlaWdodCA8PSBmcmVlTm9kZS55XG5cdFx0KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dGhpcy50cnlTcGxpdEZyZWVOb2RlVmVydGljYWxseShmcmVlTm9kZSwgdXNlZE5vZGUpO1xuXHRcdHRoaXMudHJ5U3BsaXRGcmVlTm9kZUhvcml6b250YWxseShmcmVlTm9kZSwgdXNlZE5vZGUpO1xuXG5cdFx0cmV0dXJuIHRydWU7XG5cdH1cblxuXHR0cnlTcGxpdEZyZWVOb2RlVmVydGljYWxseShmcmVlTm9kZSwgdXNlZE5vZGUpIHtcblx0XHRpZiAoXG5cdFx0XHR1c2VkTm9kZS54IDwgZnJlZU5vZGUueCArIGZyZWVOb2RlLndpZHRoICYmXG5cdFx0XHR1c2VkTm9kZS54ICsgdXNlZE5vZGUud2lkdGggPiBmcmVlTm9kZS54XG5cdFx0KSB7XG5cdFx0XHR0aGlzLnRyeUxlYXZlRnJlZVNwYWNlQXRUb3AoZnJlZU5vZGUsIHVzZWROb2RlKTtcblx0XHRcdHRoaXMudHJ5TGVhdmVGcmVlU3BhY2VBdEJvdHRvbShmcmVlTm9kZSwgdXNlZE5vZGUpO1xuXHRcdH1cblx0fVxuXG5cdHRyeUxlYXZlRnJlZVNwYWNlQXRUb3AoZnJlZU5vZGUsIHVzZWROb2RlKSB7XG5cdFx0aWYgKHVzZWROb2RlLnkgPiBmcmVlTm9kZS55ICYmIHVzZWROb2RlLnkgPCBmcmVlTm9kZS55ICsgZnJlZU5vZGUuaGVpZ2h0KSB7XG5cdFx0XHRsZXQgbmV3Tm9kZSA9IHsgLi4uZnJlZU5vZGUgfTtcblx0XHRcdG5ld05vZGUuaGVpZ2h0ID0gdXNlZE5vZGUueSAtIG5ld05vZGUueTtcblx0XHRcdHRoaXMuZnJlZVJlY3RhbmdsZXMucHVzaChuZXdOb2RlKTtcblx0XHR9XG5cdH1cblxuXHR0cnlMZWF2ZUZyZWVTcGFjZUF0Qm90dG9tKGZyZWVOb2RlLCB1c2VkTm9kZSkge1xuXHRcdGlmICh1c2VkTm9kZS55ICsgdXNlZE5vZGUuaGVpZ2h0IDwgZnJlZU5vZGUueSArIGZyZWVOb2RlLmhlaWdodCkge1xuXHRcdFx0bGV0IG5ld05vZGUgPSB7IC4uLmZyZWVOb2RlIH07XG5cdFx0XHRuZXdOb2RlLnkgPSB1c2VkTm9kZS55ICsgdXNlZE5vZGUuaGVpZ2h0O1xuXHRcdFx0bmV3Tm9kZS5oZWlnaHQgPVxuXHRcdFx0XHRmcmVlTm9kZS55ICsgZnJlZU5vZGUuaGVpZ2h0IC0gKHVzZWROb2RlLnkgKyB1c2VkTm9kZS5oZWlnaHQpO1xuXHRcdFx0dGhpcy5mcmVlUmVjdGFuZ2xlcy5wdXNoKG5ld05vZGUpO1xuXHRcdH1cblx0fVxuXG5cdHRyeVNwbGl0RnJlZU5vZGVIb3Jpem9udGFsbHkoZnJlZU5vZGUsIHVzZWROb2RlKSB7XG5cdFx0aWYgKFxuXHRcdFx0dXNlZE5vZGUueSA8IGZyZWVOb2RlLnkgKyBmcmVlTm9kZS5oZWlnaHQgJiZcblx0XHRcdHVzZWROb2RlLnkgKyB1c2VkTm9kZS5oZWlnaHQgPiBmcmVlTm9kZS55XG5cdFx0KSB7XG5cdFx0XHR0aGlzLnRyeUxlYXZlRnJlZVNwYWNlT25MZWZ0KGZyZWVOb2RlLCB1c2VkTm9kZSk7XG5cdFx0XHR0aGlzLnRyeUxlYXZlRnJlZVNwYWNlT25SaWdodChmcmVlTm9kZSwgdXNlZE5vZGUpO1xuXHRcdH1cblx0fVxuXG5cdHRyeUxlYXZlRnJlZVNwYWNlT25MZWZ0KGZyZWVOb2RlLCB1c2VkTm9kZSkge1xuXHRcdGlmICh1c2VkTm9kZS54ID4gZnJlZU5vZGUueCAmJiB1c2VkTm9kZS54IDwgZnJlZU5vZGUueCArIGZyZWVOb2RlLndpZHRoKSB7XG5cdFx0XHRsZXQgbmV3Tm9kZSA9IHsgLi4uZnJlZU5vZGUgfTtcblx0XHRcdG5ld05vZGUud2lkdGggPSB1c2VkTm9kZS54IC0gbmV3Tm9kZS54O1xuXHRcdFx0dGhpcy5mcmVlUmVjdGFuZ2xlcy5wdXNoKG5ld05vZGUpO1xuXHRcdH1cblx0fVxuXG5cdHRyeUxlYXZlRnJlZVNwYWNlT25SaWdodChmcmVlTm9kZSwgdXNlZE5vZGUpIHtcblx0XHRpZiAodXNlZE5vZGUueCArIHVzZWROb2RlLndpZHRoIDwgZnJlZU5vZGUueCArIGZyZWVOb2RlLndpZHRoKSB7XG5cdFx0XHRsZXQgbmV3Tm9kZSA9IHsgLi4uZnJlZU5vZGUgfTtcblx0XHRcdG5ld05vZGUueCA9IHVzZWROb2RlLnggKyB1c2VkTm9kZS53aWR0aDtcblx0XHRcdG5ld05vZGUud2lkdGggPVxuXHRcdFx0XHRmcmVlTm9kZS54ICsgZnJlZU5vZGUud2lkdGggLSAodXNlZE5vZGUueCArIHVzZWROb2RlLndpZHRoKTtcblx0XHRcdHRoaXMuZnJlZVJlY3RhbmdsZXMucHVzaChuZXdOb2RlKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogR29lcyB0aHJvdWdoIHRoZSBmcmVlIHJlY3RhbmdsZSBsaXN0IGFuZCByZW1vdmVzIGFueSByZWR1bmRhbnQgZW50cmllcy5cblx0ICovXG5cdHBydW5lRnJlZUxpc3QoKSB7XG5cdFx0bGV0IGkgPSAwO1xuXHRcdHdoaWxlIChpIDwgdGhpcy5mcmVlUmVjdGFuZ2xlcy5sZW5ndGgpIHtcblx0XHRcdGxldCBqID0gaSArIDE7XG5cdFx0XHRpZiAoaiA9PT0gdGhpcy5mcmVlUmVjdGFuZ2xlcy5sZW5ndGgpIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHR3aGlsZSAoaiA8IHRoaXMuZnJlZVJlY3RhbmdsZXMubGVuZ3RoKSB7XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHR0aGlzLmlzQ29udGFpbmVkSW4odGhpcy5mcmVlUmVjdGFuZ2xlc1tpXSwgdGhpcy5mcmVlUmVjdGFuZ2xlc1tqXSlcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0dGhpcy5mcmVlUmVjdGFuZ2xlcy5zcGxpY2UoaSwgMSk7XG5cdFx0XHRcdFx0aS0tO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHR0aGlzLmlzQ29udGFpbmVkSW4odGhpcy5mcmVlUmVjdGFuZ2xlc1tqXSwgdGhpcy5mcmVlUmVjdGFuZ2xlc1tpXSlcblx0XHRcdFx0KSB7XG5cdFx0XHRcdFx0dGhpcy5mcmVlUmVjdGFuZ2xlcy5zcGxpY2UoaiwgMSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aisrO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGkrKztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpc0NvbnRhaW5lZEluKHJlY3RBLCByZWN0Qikge1xuXHRcdHJldHVybiAoXG5cdFx0XHRyZWN0QSAmJlxuXHRcdFx0cmVjdEIgJiZcblx0XHRcdHJlY3RBLnggPj0gcmVjdEIueCAmJlxuXHRcdFx0cmVjdEEueSA+PSByZWN0Qi55ICYmXG5cdFx0XHRyZWN0QS54ICsgcmVjdEEud2lkdGggPD0gcmVjdEIueCArIHJlY3RCLndpZHRoICYmXG5cdFx0XHRyZWN0QS55ICsgcmVjdEEuaGVpZ2h0IDw9IHJlY3RCLnkgKyByZWN0Qi5oZWlnaHRcblx0XHQpO1xuXHR9XG59XG5cbmV4cG9ydCBjbGFzcyBGcmVlU3BhY2VCb3gge1xuICB4ID0gMFxuICB5ID0gMFxuICB3aWR0aCA9IG51bGxcbiAgaGVpZ2h0ID0gbnVsbFxuXG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQpIHtcbiAgICB0aGlzLndpZHRoID0gd2lkdGhcbiAgICB0aGlzLmhlaWdodCA9IGhlaWdodFxuICB9XG5cbn0iLCJpbXBvcnQgQmluIGZyb20gXCIuL0JpblwiO1xuaW1wb3J0IEJveCBmcm9tIFwiLi9Cb3hcIjtcbmltcG9ydCBTY29yZSBmcm9tIFwiLi9TY29yZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTY29yZUJvYXJkRW50cnkge1xuICAgIGJpbjogQmluO1xuICAgIGJveDogQm94O1xuICAgIHNjb3JlOiBTY29yZTtcblxuICAgIGNvbnN0cnVjdG9yKGJpbjogQmluLCBib3g6IEJveCkge1xuICAgICAgICB0aGlzLmJpbiA9IGJpblxuICAgICAgICB0aGlzLmJveCA9IGJveFxuICAgIH1cblxuICAgIGNhbGN1bGF0ZSgpIHtcbiAgICAgICAgdGhpcy5zY29yZSA9IHRoaXMuYmluLnNjb3JlRm9yKHRoaXMuYm94KTtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcmU7XG4gICAgfVxuXG4gICAgZml0KCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuc2NvcmUuaXNCbGFuaygpO1xuICAgIH1cbn0iLCIvLyAjICAgICAgIGJveF8xIGJveF8yIGJveF8zIC4uLlxuLy8gIyBiaW5fMSAgMTAwICAgMjAwICAgIDBcbi8vICMgYmluXzIgICAwICAgICA1ICAgICAwXG4vLyAjIGJpbl8zICAgOSAgICAxMDAgICAgMFxuLy8gIyAuLi5cbmltcG9ydCBCaW4gZnJvbSAnLi9CaW4nO1xuaW1wb3J0IEJveCBmcm9tICcuL0JveCc7XG5pbXBvcnQgU2NvcmVCb2FyZEVudHJ5IGZyb20gJy4vU2NvcmVCb2FyZEVudHJ5JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2NvcmVCb2FyZCB7XG5cdGVudHJpZXM6IFNjb3JlQm9hcmRFbnRyeVtdID0gW107XG5cblx0Y29uc3RydWN0b3IoYmluczogQmluW10sIGJveGVzOiBCb3hbXSkge1xuXHRcdGJpbnMuZm9yRWFjaCgoYmluKSA9PiB7XG5cdFx0XHR0aGlzLmFkZEJpbkVudHJpZXMoYmluLCBib3hlcyk7XG5cdFx0fSk7XG5cdH1cblxuXHRkZWJ1ZygpIHtcblx0XHRyZXF1aXJlKCdjb25zb2xlLnRhYmxlJyk7XG5cdFx0Y29uc29sZS50YWJsZShcblx0XHRcdHRoaXMuZW50cmllcy5tYXAoKGVudHJ5KSA9PiAoe1xuXHRcdFx0XHRiaW46IGVudHJ5LmJpbi5sYWJlbCxcblx0XHRcdFx0c2NvcmU6IGVudHJ5LnNjb3JlLFxuXHRcdFx0fSkpXG5cdFx0KTtcblx0fVxuXG5cdGFkZEJpbkVudHJpZXMoYmluLCBib3hlcykge1xuXHRcdGJveGVzLmZvckVhY2goKGJveCkgPT4ge1xuXHRcdFx0bGV0IGVudHJ5ID0gbmV3IFNjb3JlQm9hcmRFbnRyeShiaW4sIGJveCk7XG5cdFx0XHRlbnRyeS5jYWxjdWxhdGUoKTtcblx0XHRcdHRoaXMuZW50cmllcy5wdXNoKGVudHJ5KTtcblx0XHR9KTtcblx0fVxuXG5cdGxhcmdlc3ROb3RGaXRpbmdCb3goKSB7XG4gICAgICAgIGxldCB1bmZpdDogU2NvcmVCb2FyZEVudHJ5O1xuXHRcdGxldCBmaXR0aW5nQm94ZXMgPSB0aGlzLmVudHJpZXNcblx0XHRcdC5maWx0ZXIoKGVudHJ5KSA9PiBlbnRyeS5maXQpXG5cdFx0XHQubWFwKChlbnRyeSkgPT4gZW50cnkuYm94KTtcblxuICAgICAgICB0aGlzLmVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHVuZml0QXJlYSA9IHVuZml0LmJveC53aWR0aCAqIHVuZml0LmJveC5oZWlnaHQ7XG4gICAgICAgICAgICBjb25zdCBlbnRyeUFyZWEgPSBlbnRyeS5ib3gud2lkdGggKiBlbnRyeS5ib3guaGVpZ2h0O1xuXHRcdFx0aWYgKCFmaXR0aW5nQm94ZXMuaW5jbHVkZXMoZW50cnkuYm94KSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0XHRpZiAodW5maXQgPT09IG51bGwgfHwgdW5maXRBcmVhIDwgZW50cnlBcmVhKSB7XG5cdFx0XHRcdHVuZml0ID0gZW50cnk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gdW5maXQuYm94ID8gdW5maXQgOiBmYWxzZTtcblx0fVxuXG5cdGJlc3RGaXQoKSB7XG5cdFx0bGV0IGJlc3Q6IFNjb3JlQm9hcmRFbnRyeSB8IG51bGwgPSBudWxsO1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5lbnRyaWVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRsZXQgZW50cnkgPSB0aGlzLmVudHJpZXNbaV07XG5cdFx0XHRpZiAoIWVudHJ5LmZpdCgpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGJlc3QgPT09IG51bGwgfHwgZW50cnkuc2NvcmUgPCBiZXN0LnNjb3JlKSB7XG5cdFx0XHRcdGJlc3QgPSBlbnRyeTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGJlc3Q7XG5cdH1cblxuXHRyZW1vdmVCb3goYm94KSB7XG5cdFx0dGhpcy5lbnRyaWVzID0gdGhpcy5lbnRyaWVzLmZpbHRlcigoZW50cnkpID0+IHtcblx0XHRcdHJldHVybiBlbnRyeS5ib3ggIT09IGJveDtcblx0XHR9KTtcblx0fVxuXG5cdGFkZEJpbihiaW4pIHtcblx0XHR0aGlzLmFkZEJpbkVudHJpZXMoYmluLCB0aGlzLmN1cnJlbnRCb3hlcygpKTtcblx0fVxuXG5cdHJlY2FsY3VsYXRlQmluKGJpbikge1xuXHRcdHRoaXMuZW50cmllc1xuXHRcdFx0LmZpbHRlcigoZW50cnkpID0+IGVudHJ5LmJpbiA9PT0gYmluKVxuXHRcdFx0LmZvckVhY2goKGVudHJ5KSA9PiBlbnRyeS5jYWxjdWxhdGUoKSk7XG5cdH1cblxuXHRjdXJyZW50Qm94ZXMoKSB7XG5cdFx0cmV0dXJuIFsuLi5uZXcgU2V0KHRoaXMuZW50cmllcy5tYXAoKGVudHJ5KSA9PiBlbnRyeS5ib3gpKV07XG5cdH1cbn1cbiIsImltcG9ydCBCaW4gZnJvbSAnLi9CaW4nO1xuaW1wb3J0IEJveCBmcm9tICcuL0JveCc7XG5pbXBvcnQgU2NvcmUgZnJvbSAnLi9TY29yZSc7XG5pbXBvcnQgU2NvcmVCb2FyZCBmcm9tICcuL1Njb3JlQm9hcmQnO1xuaW1wb3J0IHsgUGFja2VkU2NvcmVzIH0gZnJvbSAnLi9UeXBlcyc7XG5pbXBvcnQgU2NvcmVCb2FyZEVudHJ5IGZyb20gJy4vU2NvcmVCb2FyZEVudHJ5JztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGFja2VyIHtcblx0YmluczogQmluW10gPSBbXTtcblx0dW5wYWNrZWRCb3hlczogQm94W10gPSBbXTtcblxuXHRjb25zdHJ1Y3RvcihiaW5zOiBCaW5bXSkge1xuXHRcdHRoaXMuYmlucyA9IGJpbnM7XG5cdH1cblxuXHRwYWNrPFQgZXh0ZW5kcyBCb3g+KGJveGVzOiBUW10pOiBQYWNrZWRTY29yZXM8VD5bXSB7XG4gICAgICAgIGxldCBwYWNrZWRCb3hlczogUGFja2VkU2NvcmVzPFQ+W10gPSBbXTtcbiAgICAgICAgbGV0IGVudHJ5OiBTY29yZUJvYXJkRW50cnkgfCBudWxsO1xuXG5cdFx0Ym94ZXMgPSBib3hlcy5maWx0ZXIoKGJveCkgPT4gIWJveC5wYWNrZWQpO1xuXHRcdGlmIChib3hlcy5sZW5ndGggPT09IDApIHJldHVybiBwYWNrZWRCb3hlcztcblxuXHRcdGxldCBsaW1pdCA9IFNjb3JlLk1BWF9JTlQ7XG5cdFx0bGV0IGJvYXJkID0gbmV3IFNjb3JlQm9hcmQodGhpcy5iaW5zLCBib3hlcyk7XG5cdFx0d2hpbGUgKChlbnRyeSA9IGJvYXJkLmJlc3RGaXQoKSkpIHtcblx0XHRcdGVudHJ5LmJpbi5pbnNlcnQoZW50cnkuYm94KTtcblx0XHRcdGJvYXJkLnJlbW92ZUJveChlbnRyeS5ib3gpO1xuXHRcdFx0Ym9hcmQucmVjYWxjdWxhdGVCaW4oZW50cnkuYmluKTtcbiAgICAgICAgICAgIHBhY2tlZEJveGVzLnB1c2goeyBib3g6IGVudHJ5LmJveCBhcyBULCBzY29yZTogZW50cnkuc2NvcmUgfSk7XG5cdFx0XHRpZiAocGFja2VkQm94ZXMubGVuZ3RoID49IGxpbWl0KSB7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHRoaXMudW5wYWNrZWRCb3hlcyA9IGJveGVzLmZpbHRlcigoYm94KSA9PiB7XG5cdFx0XHRyZXR1cm4gIWJveC5wYWNrZWQ7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gcGFja2VkQm94ZXM7XG5cdH1cbn0iLCJpbXBvcnQgQmFzZSBmcm9tICcuL0Jhc2UnO1xuaW1wb3J0IFNjb3JlIGZyb20gJy4uL1Njb3JlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmVzdEFyZWFGaXQgZXh0ZW5kcyBCYXNlIHtcblxuICBjYWxjdWxhdGVTY29yZShmcmVlUmVjdCwgcmVjdFdpZHRoLCByZWN0SGVpZ2h0KSB7XG4gICAgbGV0IGFyZWFGaXQgPSBmcmVlUmVjdC53aWR0aCAqIGZyZWVSZWN0LmhlaWdodCAtIHJlY3RXaWR0aCAqIHJlY3RIZWlnaHQ7XG4gICAgbGV0IGxlZnRPdmVySG9yaXogPSBNYXRoLmFicyhmcmVlUmVjdC53aWR0aCAtIHJlY3RXaWR0aCk7XG4gICAgbGV0IGxlZnRPdmVyVmVydCA9IE1hdGguYWJzKGZyZWVSZWN0LmhlaWdodCAtIHJlY3RIZWlnaHQpO1xuICAgIGxldCBzaG9ydFNpZGVGaXQgPSBNYXRoLm1pbihsZWZ0T3Zlckhvcml6LCBsZWZ0T3ZlclZlcnQpO1xuICAgIHJldHVybiBuZXcgU2NvcmUoYXJlYUZpdCwgc2hvcnRTaWRlRml0KTtcbiAgfVxuXG59IiwiaW1wb3J0IEJhc2UgZnJvbSAnLi9CYXNlJztcbmltcG9ydCBTY29yZSBmcm9tICcuLi9TY29yZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJlc3RMb25nU2lkZUZpdCBleHRlbmRzIEJhc2Uge1xuXG4gIGNhbGN1bGF0ZVNjb3JlKGZyZWVSZWN0LCByZWN0V2lkdGgsIHJlY3RIZWlnaHQpIHtcbiAgICBsZXQgbGVmdE92ZXJIb3JpeiA9IE1hdGguYWJzKGZyZWVSZWN0LndpZHRoIC0gcmVjdFdpZHRoKTtcbiAgICBsZXQgbGVmdE92ZXJWZXJ0ID0gTWF0aC5hYnMoZnJlZVJlY3QuaGVpZ2h0IC0gcmVjdEhlaWdodCk7XG4gICAgbGV0IGFyZ3MgPSBbbGVmdE92ZXJIb3JpeiwgbGVmdE92ZXJWZXJ0XS5zb3J0KChhLCBiKSA9PiBhIC0gYikucmV2ZXJzZSgpO1xuICAgIHJldHVybiBuZXcgU2NvcmUoYXJnc1swXSwgYXJnc1sxXSk7XG4gIH1cblxufSIsImltcG9ydCBCYXNlIGZyb20gJy4vQmFzZSc7XG5pbXBvcnQgU2NvcmUgZnJvbSAnLi4vU2NvcmUnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCb3R0b21MZWZ0IGV4dGVuZHMgQmFzZSB7XG5cbiAgY2FsY3VsYXRlU2NvcmUoZnJlZVJlY3QsIHJlY3RXaWR0aCwgcmVjdEhlaWdodCkge1xuICAgIGxldCB0b3BTaWRlWSA9IGZyZWVSZWN0LnkgKyByZWN0SGVpZ2h0O1xuICAgIHJldHVybiBuZXcgU2NvcmUodG9wU2lkZVksIGZyZWVSZWN0LngpO1xuICB9XG5cbn0iXSwic291cmNlUm9vdCI6IiJ9