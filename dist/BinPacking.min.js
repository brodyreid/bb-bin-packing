!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("BinPacking",[],e):"object"==typeof exports?exports.BinPacking=e():t.BinPacking=e()}(this,(function(){return function(){var t={23:function(t){var e=function(){"use strict";function t(e,n,r,o){"object"==typeof n&&(r=n.depth,o=n.prototype,n.filter,n=n.circular);var s=[],h=[],c="undefined"!=typeof Buffer;return void 0===n&&(n=!0),void 0===r&&(r=1/0),function e(r,u){if(null===r)return null;if(0==u)return r;var a,f;if("object"!=typeof r)return r;if(t.__isArray(r))a=[];else if(t.__isRegExp(r))a=new RegExp(r.source,i(r)),r.lastIndex&&(a.lastIndex=r.lastIndex);else if(t.__isDate(r))a=new Date(r.getTime());else{if(c&&Buffer.isBuffer(r))return a=Buffer.allocUnsafe?Buffer.allocUnsafe(r.length):new Buffer(r.length),r.copy(a),a;void 0===o?(f=Object.getPrototypeOf(r),a=Object.create(f)):(a=Object.create(o),f=o)}if(n){var l=s.indexOf(r);if(-1!=l)return h[l];s.push(r),h.push(a)}for(var p in r){var g;f&&(g=Object.getOwnPropertyDescriptor(f,p)),g&&null==g.set||(a[p]=e(r[p],u-1))}return a}(e,r)}function e(t){return Object.prototype.toString.call(t)}function i(t){var e="";return t.global&&(e+="g"),t.ignoreCase&&(e+="i"),t.multiline&&(e+="m"),e}return t.clonePrototype=function(t){if(null===t)return null;var e=function(){};return e.prototype=t,new e},t.__objToStr=e,t.__isDate=function(t){return"object"==typeof t&&"[object Date]"===e(t)},t.__isArray=function(t){return"object"==typeof t&&"[object Array]"===e(t)},t.__isRegExp=function(t){return"object"==typeof t&&"[object RegExp]"===e(t)},t.__getRegExpFlags=i,t}();t.exports&&(t.exports=e)},426:function(t,e,i){!function(){"use strict";!function(){if("undefined"==typeof console)throw new Error("Weird, console object is undefined");if("function"!=typeof console.table||console.table!==l){var e=function(t,e){return typeof e===t}.bind(null,"string"),n=s.bind(null,e),r=s.bind(null,Array.isArray),o=i(185);t.exports.getTable=function(){var t=Array.prototype.slice.call(arguments),e="";return 2===t.length&&"string"==typeof t[0]&&Array.isArray(t[1])?a(t[0],t[1]):2===t.length&&n(t[0])&&r(t[1])?c(t[0],t[1],!0):(t.forEach((function(i,n){if("string"==typeof i)return e+=i,void(n!==t.length-1&&(e+="\n"));Array.isArray(i)?e+=h(i)+"\n":"object"==typeof i&&(e+=f(i))})),e)},console.table=l}function s(t,e){return Array.isArray(e)&&e.every(t)}function h(t){var e=new o;return t.forEach((function(t){"string"==typeof t||"number"==typeof t?e.cell("item",t):Object.keys(t).forEach((function(i){e.cell(i,t[i])})),e.newRow()})),e.toString()}function c(t,e,i){var n=new o;e.forEach((function(e){e.forEach((function(e,i){n.cell(t[i],e)})),n.newRow()}));var r=n.toString();return i?r:console.log(r)}function u(t,e){var i=h(e),n=i.indexOf("\n");if(n>0){t.length>n&&(n=t.length),console.log(t);var r,o="";for(r=0;r<n;r+=1)o+="-";console.log(o)}console.log(i)}function a(t,e){var i=h(e),n=i.indexOf("\n"),r="";if(n>0){t.length>n&&(n=t.length),r+=t+"\n";var o,s="";for(o=0;o<n;o+=1)s+="-";r+=s+"\n"}return r+i}function f(t){return h(function(t){return Object.keys(t).map((function(e){return{key:e,value:t[e]}}))}(t))}function l(){var t=Array.prototype.slice.call(arguments);return 2===t.length&&"string"==typeof t[0]&&Array.isArray(t[1])?u(t[0],t[1]):2===t.length&&n(t[0])&&r(t[1])?c(t[0],t[1]):void t.forEach((function(t){if("string"==typeof t)return console.log(t);Array.isArray(t)?console.log(h(t)):"object"==typeof t&&console.log(f(t))}))}}()}()},451:function(t,e,i){var n=i(23);t.exports=function(t,e){return t=t||{},Object.keys(e).forEach((function(i){void 0===t[i]&&(t[i]=n(e[i]))})),t}},185:function(t,e,i){var n;try{n=i(561)}catch(t){}function r(){this.rows=[],this.row={__printers:{}}}function o(t){return void 0===t?"":""+t}function s(t){var e=t.replace(/\u001b\[\d+m/g,"");return null==n?e.length:n(e)}function h(t){return function(e,i){var n=o(e),r=s(n);return(i>r?Array(i-r+1).join(t):"")+n}}t.exports=r,r.prototype.newRow=function(){return this.rows.push(this.row),this.row={__printers:{}},this},r.prototype.cell=function(t,e,i){return this.row[t]=e,this.row.__printers[t]=i||o,this},r.prototype.separator="  ",r.string=o,r.leftPadder=h;var c=r.padLeft=h(" ");function u(t){return function(e,i){var n=o(e),r=s(n);return n+(i>r?Array(i-r+1).join(t):"")}}r.rightPadder=u;var a=u(" ");function f(t,e){for(var i in t)"__printers"!=i&&e(i,t[i])}function l(t,e){return t===e?0:void 0===t?1:void 0===e?-1:null===t?1:null===e?-1:t>e?1:t<e?-1:l(String(t),String(e))}r.number=function(t){return function(e,i){if(null==e)return"";if("number"!=typeof e)throw new Error(e+" is not a number");var n=null==t?e+"":e.toFixed(t);return c(n,i)}},r.prototype.columns=function(){for(var t={},e=0;e<2;e++)this.rows.forEach((function(e){var i=0;f(e,(function(e){i=Math.max(i,t[e]||0),t[e]=i,i++}))}));return Object.keys(t).sort((function(e,i){return t[e]-t[i]}))},r.prototype.print=function(){var t=this.columns(),e=this.separator,i={},n="";return this.rows.forEach((function(t){f(t,(function(e,n){var r=t.__printers[e].call(t,n);i[e]=Math.max(s(r),i[e]||0)}))})),this.rows.forEach((function(r){var o="";t.forEach((function(t){var n=i[t],s=r.hasOwnProperty(t)?""+r.__printers[t].call(r,r[t],n):"";o+=a(s,n)+e})),o=o.slice(0,-e.length),n+=o+"\n"})),n},r.prototype.toString=function(){var t=this.columns(),e=new r;return e.separator=this.separator,t.forEach((function(t){e.cell(t,t)})),e.newRow(),e.pushDelimeter(t),e.rows=e.rows.concat(this.rows),this.totals&&this.rows.length&&(e.pushDelimeter(t),this.forEachTotal(e.cell.bind(e)),e.newRow()),e.print()},r.prototype.pushDelimeter=function(t){return(t=t||this.columns()).forEach((function(t){this.cell(t,void 0,h("-"))}),this),this.newRow()},r.prototype.forEachTotal=function(t){for(var e in this.totals){var i=this.totals[e],n=i.init,r=this.rows.length;this.rows.forEach((function(t,o){n=i.reduce.call(t,n,t[e],o,r)})),t(e,n,i.printer)}},r.prototype.printTransposed=function(t){t=t||{};var e=new r;return e.separator=t.separator||this.separator,this.columns().forEach((function(i){e.cell(0,i,t.namePrinter),this.rows.forEach((function(t,n){e.cell(n+1,t[i],t.__printers[i])})),e.newRow()}),this),e.print()},r.prototype.sort=function(t){if("function"==typeof t)return this.rows.sort(t),this;var e=(Array.isArray(t)?t:this.columns()).map((function(t){var e="asc",i=/(.*)\|\s*(asc|des)\s*$/.exec(t);return i&&(t=i[1],e=i[2]),function(i,n){return"asc"==e?l(i[t],n[t]):l(n[t],i[t])}}));return this.sort((function(t,i){for(var n=0;n<e.length;n++){var r=e[n](t,i);if(0!=r)return r}return 0}))},r.prototype.total=function(t,e){return e=e||{},this.totals=this.totals||{},this.totals[t]={reduce:e.reduce||r.aggr.sum,printer:e.printer||c,init:null==e.init?0:e.init},this},r.aggr={},r.aggr.printer=function(t,e){return e=e||o,function(i,n){return c(t+e(i),n)}},r.aggr.sum=function(t,e){return t+e},r.aggr.avg=function(t,e,i,n){return t+=e,i+1==n?t/n:t},r.print=function(t,e,i){var n=e||{};e="function"==typeof e?e:function(t,e){for(var i in t)if(t.hasOwnProperty(i)){var r=n[i]||{};e(r.name||i,t[i],r.printer)}};var o=new r,s=o.cell.bind(o);return Array.isArray(t)?(i=i||function(t){return t.toString()},t.forEach((function(t){e(t,s),o.newRow()}))):(i=i||function(t){return t.printTransposed({separator:" : "})},e(t,s),o.newRow()),i(o)},r.log=function(t,e,i){console.log(r.print(t,e,i))},r.prototype.log=function(){console.log(this.toString())}},653:function(t){t.exports=[[768,879],[1155,1158],[1160,1161],[1425,1469],[1471,1471],[1473,1474],[1476,1477],[1479,1479],[1536,1539],[1552,1557],[1611,1630],[1648,1648],[1750,1764],[1767,1768],[1770,1773],[1807,1807],[1809,1809],[1840,1866],[1958,1968],[2027,2035],[2305,2306],[2364,2364],[2369,2376],[2381,2381],[2385,2388],[2402,2403],[2433,2433],[2492,2492],[2497,2500],[2509,2509],[2530,2531],[2561,2562],[2620,2620],[2625,2626],[2631,2632],[2635,2637],[2672,2673],[2689,2690],[2748,2748],[2753,2757],[2759,2760],[2765,2765],[2786,2787],[2817,2817],[2876,2876],[2879,2879],[2881,2883],[2893,2893],[2902,2902],[2946,2946],[3008,3008],[3021,3021],[3134,3136],[3142,3144],[3146,3149],[3157,3158],[3260,3260],[3263,3263],[3270,3270],[3276,3277],[3298,3299],[3393,3395],[3405,3405],[3530,3530],[3538,3540],[3542,3542],[3633,3633],[3636,3642],[3655,3662],[3761,3761],[3764,3769],[3771,3772],[3784,3789],[3864,3865],[3893,3893],[3895,3895],[3897,3897],[3953,3966],[3968,3972],[3974,3975],[3984,3991],[3993,4028],[4038,4038],[4141,4144],[4146,4146],[4150,4151],[4153,4153],[4184,4185],[4448,4607],[4959,4959],[5906,5908],[5938,5940],[5970,5971],[6002,6003],[6068,6069],[6071,6077],[6086,6086],[6089,6099],[6109,6109],[6155,6157],[6313,6313],[6432,6434],[6439,6440],[6450,6450],[6457,6459],[6679,6680],[6912,6915],[6964,6964],[6966,6970],[6972,6972],[6978,6978],[7019,7027],[7616,7626],[7678,7679],[8203,8207],[8234,8238],[8288,8291],[8298,8303],[8400,8431],[12330,12335],[12441,12442],[43014,43014],[43019,43019],[43045,43046],[64286,64286],[65024,65039],[65056,65059],[65279,65279],[65529,65531],[68097,68099],[68101,68102],[68108,68111],[68152,68154],[68159,68159],[119143,119145],[119155,119170],[119173,119179],[119210,119213],[119362,119364],[917505,917505],[917536,917631],[917760,917999]]},561:function(t,e,i){"use strict";var n=i(451),r=i(653),o={nul:0,control:0};function s(t,e){if("string"!=typeof t)return h(t,e);for(var i=0,n=0;n<t.length;n++){var r=h(t.charCodeAt(n),e);if(r<0)return-1;i+=r}return i}function h(t,e){return 0===t?e.nul:t<32||t>=127&&t<160?e.control:function(t){var e,i=0,n=r.length-1;if(t<r[0][0]||t>r[n][1])return!1;for(;n>=i;)if(e=Math.floor((i+n)/2),t>r[e][1])i=e+1;else{if(!(t<r[e][0]))return!0;n=e-1}return!1}(t)?0:1+(t>=4352&&(t<=4447||9001==t||9002==t||t>=11904&&t<=42191&&12351!=t||t>=44032&&t<=55203||t>=63744&&t<=64255||t>=65040&&t<=65049||t>=65072&&t<=65135||t>=65280&&t<=65376||t>=65504&&t<=65510||t>=131072&&t<=196605||t>=196608&&t<=262141))}t.exports=function(t){return s(t,o)},t.exports.config=function(t){return t=n(t||{},o),function(e){return s(e,t)}}},878:function(t,e,i){"use strict";i.r(e),i.d(e,{Bin:function(){return u},Box:function(){return h},Packer:function(){return p},heuristics:function(){return n}});var n={};i.r(n),i.d(n,{BestAreaFit:function(){return g},BestLongSideFit:function(){return y},BestShortSideFit:function(){return s},BottomLeft:function(){return d}});var r=function(){function t(e,i){this.score_1=t.MAX_INT,this.score_2=t.MAX_INT,void 0!==e&&(this.score_1=e),void 0!==i&&(this.score_2=i)}return t.prototype.valueOf=function(){return this.score_1+this.score_2},t.prototype.assign=function(t){this.score_1=t.score_1,this.score_2=t.score_2},t.prototype.isBlank=function(){return this.score_1===t.MAX_INT},t.prototype.decreaseBy=function(t){this.score_1+=t,this.score_2+=t},t.MAX_INT=Number.MAX_SAFE_INTEGER,t}(),o=function(){function t(){}return t.prototype.findPositionForNewNode=function(t,e){var i=this,n=new r,o=t.width,s=t.height;return e.forEach((function(e){i.tryPlaceRectIn(e,t,o,s,n),t.constrainRotation||i.tryPlaceRectIn(e,t,s,o,n)})),n},t.prototype.tryPlaceRectIn=function(t,e,i,n,r){if(t.width>=i&&t.height>=n){var o=this.calculateScore(t,i,n);o<r&&(e.x=t.x,e.y=t.y,e.width=i,e.height=n,e.packed=!0,r.assign(o))}},t.prototype.calculateScore=function(t,e,i){throw"NotImplementedError"},t}();class s extends o{calculateScore(t,e,i){let n=[Math.abs(t.width-e),Math.abs(t.height-i)].sort(((t,e)=>t-e));return new r(n[0],n[1])}}var h=function(t,e,i){void 0===i&&(i=!1),this.width=0,this.height=0,this.x=0,this.y=0,this.constrainRotation=!1,this.packed=!1,this.width=t,this.height=e,this.constrainRotation=i},c=function(){return(c=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var r in e=arguments[i])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)},u=function(){function t(t,e,i){this.width=0,this.height=0,this.boxes=[],this.heuristic=null,this.freeRectangles=[],this.width=t,this.height=e,this.freeRectangles=[new a(t,e)],this.heuristic=i||new s}return Object.defineProperty(t.prototype,"area",{get:function(){return this.width*this.height},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"efficiency",{get:function(){var t=0;return this.boxes.forEach((function(e){t+=e.width*e.height})),100*t/this.area},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"label",{get:function(){return"".concat(this.width,"x").concat(this.height," ").concat(this.efficiency,"%")},enumerable:!1,configurable:!0}),t.prototype.insert=function(t){if(t.packed)return!1;if(this.heuristic.findPositionForNewNode(t,this.freeRectangles),!t.packed)return!1;for(var e=this.freeRectangles.length,i=0;i<e;)this.splitFreeNode(this.freeRectangles[i],t)?(this.freeRectangles.splice(i,1),e--):i++;return this.pruneFreeList(),this.boxes.push(t),!0},t.prototype.scoreFor=function(t){var e=new h(t.width,t.height,t.constrainRotation);return this.heuristic.findPositionForNewNode(e,this.freeRectangles)},t.prototype.isLargerThan=function(t){return this.width>=t.width&&this.height>=t.height||this.height>=t.width&&this.width>=t.height},t.prototype.splitFreeNode=function(t,e){return!(e.x>=t.x+t.width||e.x+e.width<=t.x||e.y>=t.y+t.height||e.y+e.height<=t.y||(this.trySplitFreeNodeVertically(t,e),this.trySplitFreeNodeHorizontally(t,e),0))},t.prototype.trySplitFreeNodeVertically=function(t,e){e.x<t.x+t.width&&e.x+e.width>t.x&&(this.tryLeaveFreeSpaceAtTop(t,e),this.tryLeaveFreeSpaceAtBottom(t,e))},t.prototype.tryLeaveFreeSpaceAtTop=function(t,e){if(e.y>t.y&&e.y<t.y+t.height){var i=c({},t);i.height=e.y-i.y,this.freeRectangles.push(i)}},t.prototype.tryLeaveFreeSpaceAtBottom=function(t,e){if(e.y+e.height<t.y+t.height){var i=c({},t);i.y=e.y+e.height,i.height=t.y+t.height-(e.y+e.height),this.freeRectangles.push(i)}},t.prototype.trySplitFreeNodeHorizontally=function(t,e){e.y<t.y+t.height&&e.y+e.height>t.y&&(this.tryLeaveFreeSpaceOnLeft(t,e),this.tryLeaveFreeSpaceOnRight(t,e))},t.prototype.tryLeaveFreeSpaceOnLeft=function(t,e){if(e.x>t.x&&e.x<t.x+t.width){var i=c({},t);i.width=e.x-i.x,this.freeRectangles.push(i)}},t.prototype.tryLeaveFreeSpaceOnRight=function(t,e){if(e.x+e.width<t.x+t.width){var i=c({},t);i.x=e.x+e.width,i.width=t.x+t.width-(e.x+e.width),this.freeRectangles.push(i)}},t.prototype.pruneFreeList=function(){for(var t=0;t<this.freeRectangles.length;){var e=t+1;if(e===this.freeRectangles.length)break;for(;e<this.freeRectangles.length;){if(this.isContainedIn(this.freeRectangles[t],this.freeRectangles[e])){this.freeRectangles.splice(t,1),t--;break}this.isContainedIn(this.freeRectangles[e],this.freeRectangles[t])?this.freeRectangles.splice(e,1):e++,t++}}},t.prototype.isContainedIn=function(t,e){return t&&e&&t.x>=e.x&&t.y>=e.y&&t.x+t.width<=e.x+e.width&&t.y+t.height<=e.y+e.height},t}(),a=function(t,e){this.x=0,this.y=0,this.width=null,this.height=null,this.width=t,this.height=e},f=function(){function t(t,e){this.bin=t,this.box=e}return t.prototype.calculate=function(){return this.score=this.bin.scoreFor(this.box),this.score},t.prototype.fit=function(){return!this.score.isBlank()},t}(),l=function(){function t(t,e){var i=this;this.entries=[],t.forEach((function(t){i.addBinEntries(t,e)}))}return t.prototype.debug=function(){i(426),console.table(this.entries.map((function(t){return{bin:t.bin.label,score:t.score}})))},t.prototype.addBinEntries=function(t,e){var i=this;e.forEach((function(e){var n=new f(t,e);n.calculate(),i.entries.push(n)}))},t.prototype.largestNotFitingBox=function(){var t,e=this.entries.filter((function(t){return t.fit})).map((function(t){return t.box}));return this.entries.forEach((function(i){var n=t.box.width*t.box.height,r=i.box.width*i.box.height;e.includes(i.box)&&(null===t||n<r)&&(t=i)})),!!t.box&&t},t.prototype.bestFit=function(){for(var t=null,e=0;e<this.entries.length;e++){var i=this.entries[e];i.fit()&&(null===t||i.score<t.score)&&(t=i)}return t},t.prototype.removeBox=function(t){this.entries=this.entries.filter((function(e){return e.box!==t}))},t.prototype.addBin=function(t){this.addBinEntries(t,this.currentBoxes())},t.prototype.recalculateBin=function(t){this.entries.filter((function(e){return e.bin===t})).forEach((function(t){return t.calculate()}))},t.prototype.currentBoxes=function(){return function(t,e,i){if(i||2===arguments.length)for(var n,r=0,o=e.length;r<o;r++)!n&&r in e||(n||(n=Array.prototype.slice.call(e,0,r)),n[r]=e[r]);return t.concat(n||Array.prototype.slice.call(e))}([],function(t,e){var i="function"==typeof Symbol&&t[Symbol.iterator];if(!i)return t;var n,r,o=i.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)s.push(n.value)}catch(t){r={error:t}}finally{try{n&&!n.done&&(i=o.return)&&i.call(o)}finally{if(r)throw r.error}}return s}(new Set(this.entries.map((function(t){return t.box})))),!1)},t}(),p=function(){function t(t){this.bins=[],this.unpackedBoxes=[],this.bins=t}return t.prototype.pack=function(t){var e,i=[];if(0===(t=t.filter((function(t){return!t.packed}))).length)return i;for(var n=r.MAX_INT,o=new l(this.bins,t);(e=o.bestFit())&&(e.bin.insert(e.box),o.removeBox(e.box),o.recalculateBin(e.bin),i.push({box:e.box,score:e.score}),!(i.length>=n)););return this.unpackedBoxes=t.filter((function(t){return!t.packed})),i},t}();class g extends o{calculateScore(t,e,i){let n=t.width*t.height-e*i,o=Math.abs(t.width-e),s=Math.abs(t.height-i),h=Math.min(o,s);return new r(n,h)}}class y extends o{calculateScore(t,e,i){let n=[Math.abs(t.width-e),Math.abs(t.height-i)].sort(((t,e)=>t-e)).reverse();return new r(n[0],n[1])}}class d extends o{calculateScore(t,e,i){let n=t.y+i;return new r(n,t.x)}}},954:function(t,e,i){"use strict";i.r(e),i.d(e,{Bin:function(){return s},Item:function(){return u},Packer:function(){return f}});const n=t=>Math.round(t*10**5);function r(t,...e){}const o=function(t="binpackingjs"){return r.bind(void 0,t)}("3D:");class s{name="";width=0;height=0;depth=0;maxWeight=0;items=[];constructor(t,e,i,r,o){this.name=t,this.width=n(e),this.height=n(i),this.depth=n(r),this.maxWeight=n(o)}getName(){return this.name}getWidth(){return this.width}getHeight(){return this.height}getDepth(){return this.depth}getMaxWeight(){return this.maxWeight}getItems(){return this.items}getVolume(){return this.getWidth()*this.getHeight()*this.getDepth()}getPackedWeight(){return this.items.reduce(((t,e)=>t+e.getWeight()),0)}weighItem(t){const e=this.getMaxWeight();return!e||t.getWeight()+this.getPackedWeight()<=e}scoreRotation(t,e){t.rotationType=e;let i=t.getDimension();return this.getWidth()<i[0]||this.getHeight()<i[1]||this.getDepth()<i[2]?0:Math.pow(i[0]/this.getWidth(),2)+Math.pow(i[1]/this.getHeight(),2)+Math.pow(i[2]/this.getDepth(),2)}getBestRotationOrder(t){const e={};for(let i=0;i<t.allowedRotation.length;i++){const n=t.allowedRotation[i];e[n]=this.scoreRotation(t,n)}return Object.keys(e).sort(((t,i)=>e[i]-e[t])).map(Number)}putItem(t,e){const i=this;let n=!1;const r=this.getBestRotationOrder(t);t.position=e;for(let s=0;s<r.length;s++){t.rotationType=r[s];let h=t.getDimension();if(i.getWidth()<e[0]+h[0]||i.getHeight()<e[1]+h[1]||i.getDepth()<e[2]+h[2])n=!1;else{n=!0;for(let e=0;e<i.items.length;e++)if(i.items[e].intersect(t)){n=!1;break}n&&i.items.push(t)}if(o("try to putItem",n,"item",t.toString(),"box",i.toString()),n)break}return n}toString(){return`Bin:${this.name} (WxHxD = ${this.getWidth()}x${this.getHeight()}x${this.getDepth()}, MaxWg. = ${this.getMaxWeight()})`}}const h=[0,0,0],c={0:"RotationType_WHD (w,h,d)",1:"RotationType_HWD (h,w,d)",2:"RotationType_HDW (h,d,w)",3:"RotationType_DHW (d,h,w)",4:"RotationType_DWH (d,w,h)",5:"RotationType_WDH (w,d,h)"};class u{name="";width=0;height=0;depth=0;weight=0;allowedRotation=[0,1,2,3,4,5];rotationType=0;position=[];constructor(t,e,i,r,o,s){this.name=t,this.width=n(e),this.height=n(i),this.depth=n(r),this.weight=n(o),this.allowedRotation=s||this.allowedRotation}getWidth(){return this.width}getHeight(){return this.height}getDepth(){return this.depth}getWeight(){return this.weight}getRotationType(){return this.rotationType}getAllowedRotation(){return this.allowedRotation}getRotationTypeString(){return c[this.getRotationType()]}getDimension(){let t;switch(this.rotationType){case 0:t=[this.getWidth(),this.getHeight(),this.getDepth()];break;case 1:t=[this.getHeight(),this.getWidth(),this.getDepth()];break;case 2:t=[this.getHeight(),this.getDepth(),this.getWidth()];break;case 3:t=[this.getDepth(),this.getHeight(),this.getWidth()];break;case 4:t=[this.getDepth(),this.getWidth(),this.getHeight()];break;case 5:t=[this.getWidth(),this.getDepth(),this.getHeight()]}return t}intersect(t){return a(this,t,0,1)&&a(this,t,1,2)&&a(this,t,0,2)}getVolume(){return this.getWidth()*this.getHeight()*this.getDepth()}toString(){return`Item:${this.name} (${this.getRotationTypeString()} = ${this.getDimension().join("x")}, Wg. = ${this.weight})`}}const a=(t,e,i,n)=>{let r,o,s,h,c,u,a,f;return r=t.getDimension(),o=e.getDimension(),s=t.position[i]+r[i]/2,h=t.position[n]+r[n]/2,c=e.position[i]+o[i]/2,u=e.position[n]+o[n]/2,a=Math.max(s,c)-Math.min(s,c),f=Math.max(h,u)-Math.min(h,u),a<(r[i]+o[i])/2&&f<(r[n]+o[n])/2};class f{bins=[];items=[];unfitItems=[];addBin(t){this.bins.push(t)}addItem(t){this.items.push(t)}findFittedBin(t){for(let e=0;e<this.bins.length;e++){let i=this.bins[e];if(i.weighItem(t)&&i.putItem(t,h))return 1===i.items.length&&i.items[0]===t&&(i.items=[]),i}return null}getBiggerBinThan(t){let e=t.getVolume();for(let t=0;t<this.bins;t++){let i=this.bins[t];if(i.getVolume()>e)return i}return null}unfitItem(){0!==this.items.length&&(this.unfitItems.push(this.items[0]),this.items.splice(0,1))}packToBin(t,e){let i=null,n=[];if(!t.weighItem(e[0])||!t.putItem(e[0],h)){let i=this.getBiggerBinThan(t);return i?this.packToBin(i,e):this.items}for(let e=1;e<this.items.length;e++){let r=!1,o=this.items[e];if(t.weighItem(o))t:for(let e=0;e<3;e++)for(let i=0;i<t.items.length;i++){let n,s=t.items[i],h=s.getDimension();switch(e){case 0:n=[s.position[0]+h[0],s.position[1],s.position[2]];break;case 1:n=[s.position[0],s.position[1]+h[1],s.position[2]];break;case 2:n=[s.position[0],s.position[1],s.position[2]+h[2]]}if(t.putItem(o,n)){r=!0;break t}}if(!r){for(;null!==i;)if(i=this.getBiggerBinThan(t),i&&(i.items.push(o),0===this.packToBin(i,i.items).length)){t=i,r=!0;break}r||n.push(o)}}return n}pack(){for(this.bins.sort(((t,e)=>t.getVolume()-e.getVolume())),this.items.sort(((t,e)=>e.getVolume()-t.getVolume()));this.items.length>0;){let t=this.findFittedBin(this.items[0]);null!==t?this.items=this.packToBin(t,this.items):this.unfitItem()}return null}}}},e={};function i(n){if(e[n])return e[n].exports;var r=e[n]={exports:{}};return t[n](r,r.exports,i),r.exports}i.d=function(t,e){for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n={};return function(){"use strict";i.r(n),i.d(n,{BP2D:function(){return e},BP3D:function(){return r},Types:function(){return t}});var t={};i.r(t);var e=i(878),r=i(954)}(),n}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,