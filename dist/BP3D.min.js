!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("BinPacking",[],e):"object"==typeof exports?exports.BinPacking=e():t.BinPacking=e()}(this,(function(){return function(){"use strict";var t={d:function(e,i){for(var h in i)t.o(i,h)&&!t.o(e,h)&&Object.defineProperty(e,h,{enumerable:!0,get:i[h]})},o:function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r:function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})}},e={};t.r(e),t.d(e,{Bin:function(){return s},Item:function(){return g},Packer:function(){return u}});const i=t=>Math.round(t*10**5);function h(t,...e){}const n=function(t="binpackingjs"){return h.bind(void 0,t)}("3D:");class s{name="";width=0;height=0;depth=0;maxWeight=0;items=[];constructor(t,e,h,n,s){this.name=t,this.width=i(e),this.height=i(h),this.depth=i(n),this.maxWeight=i(s)}getName(){return this.name}getWidth(){return this.width}getHeight(){return this.height}getDepth(){return this.depth}getMaxWeight(){return this.maxWeight}getItems(){return this.items}getVolume(){return this.getWidth()*this.getHeight()*this.getDepth()}getPackedWeight(){return this.items.reduce(((t,e)=>t+e.getWeight()),0)}weighItem(t){const e=this.getMaxWeight();return!e||t.getWeight()+this.getPackedWeight()<=e}scoreRotation(t,e){t.rotationType=e;let i=t.getDimension();return this.getWidth()<i[0]||this.getHeight()<i[1]||this.getDepth()<i[2]?0:Math.pow(i[0]/this.getWidth(),2)+Math.pow(i[1]/this.getHeight(),2)+Math.pow(i[2]/this.getDepth(),2)}getBestRotationOrder(t){const e={};for(let i=0;i<t.allowedRotation.length;i++){const h=t.allowedRotation[i];e[h]=this.scoreRotation(t,h)}return Object.keys(e).sort(((t,i)=>e[i]-e[t])).map(Number)}putItem(t,e){const i=this;let h=!1;const s=this.getBestRotationOrder(t);t.position=e;for(let o=0;o<s.length;o++){t.rotationType=s[o];let r=t.getDimension();if(i.getWidth()<e[0]+r[0]||i.getHeight()<e[1]+r[1]||i.getDepth()<e[2]+r[2])h=!1;else{h=!0;for(let e=0;e<i.items.length;e++)if(i.items[e].intersect(t)){h=!1;break}h&&i.items.push(t)}if(n("try to putItem",h,"item",t.toString(),"box",i.toString()),h)break}return h}toString(){return`Bin:${this.name} (WxHxD = ${this.getWidth()}x${this.getHeight()}x${this.getDepth()}, MaxWg. = ${this.getMaxWeight()})`}}const o=[0,0,0],r={0:"RotationType_WHD (w,h,d)",1:"RotationType_HWD (h,w,d)",2:"RotationType_HDW (h,d,w)",3:"RotationType_DHW (d,h,w)",4:"RotationType_DWH (d,w,h)",5:"RotationType_WDH (w,d,h)"};class g{name="";width=0;height=0;depth=0;weight=0;allowedRotation=[0,1,2,3,4,5];rotationType=0;position=[];constructor(t,e,h,n,s,o){this.name=t,this.width=i(e),this.height=i(h),this.depth=i(n),this.weight=i(s),this.allowedRotation=o||this.allowedRotation}getWidth(){return this.width}getHeight(){return this.height}getDepth(){return this.depth}getWeight(){return this.weight}getRotationType(){return this.rotationType}getAllowedRotation(){return this.allowedRotation}getRotationTypeString(){return r[this.getRotationType()]}getDimension(){let t;switch(this.rotationType){case 0:t=[this.getWidth(),this.getHeight(),this.getDepth()];break;case 1:t=[this.getHeight(),this.getWidth(),this.getDepth()];break;case 2:t=[this.getHeight(),this.getDepth(),this.getWidth()];break;case 3:t=[this.getDepth(),this.getHeight(),this.getWidth()];break;case 4:t=[this.getDepth(),this.getWidth(),this.getHeight()];break;case 5:t=[this.getWidth(),this.getDepth(),this.getHeight()]}return t}intersect(t){return a(this,t,0,1)&&a(this,t,1,2)&&a(this,t,0,2)}getVolume(){return this.getWidth()*this.getHeight()*this.getDepth()}toString(){return`Item:${this.name} (${this.getRotationTypeString()} = ${this.getDimension().join("x")}, Wg. = ${this.weight})`}}const a=(t,e,i,h)=>{let n,s,o,r,g,a,u,p;return n=t.getDimension(),s=e.getDimension(),o=t.position[i]+n[i]/2,r=t.position[h]+n[h]/2,g=e.position[i]+s[i]/2,a=e.position[h]+s[h]/2,u=Math.max(o,g)-Math.min(o,g),p=Math.max(r,a)-Math.min(r,a),u<(n[i]+s[i])/2&&p<(n[h]+s[h])/2};class u{bins=[];items=[];unfitItems=[];addBin(t){this.bins.push(t)}addItem(t){this.items.push(t)}findFittedBin(t){for(let e=0;e<this.bins.length;e++){let i=this.bins[e];if(i.weighItem(t)&&i.putItem(t,o))return 1===i.items.length&&i.items[0]===t&&(i.items=[]),i}return null}getBiggerBinThan(t){let e=t.getVolume();for(let t=0;t<this.bins;t++){let i=this.bins[t];if(i.getVolume()>e)return i}return null}unfitItem(){0!==this.items.length&&(this.unfitItems.push(this.items[0]),this.items.splice(0,1))}packToBin(t,e){let i=null,h=[];if(!t.weighItem(e[0])||!t.putItem(e[0],o)){let i=this.getBiggerBinThan(t);return i?this.packToBin(i,e):this.items}for(let e=1;e<this.items.length;e++){let n=!1,s=this.items[e];if(t.weighItem(s))t:for(let e=0;e<3;e++)for(let i=0;i<t.items.length;i++){let h,o=t.items[i],r=o.getDimension();switch(e){case 0:h=[o.position[0]+r[0],o.position[1],o.position[2]];break;case 1:h=[o.position[0],o.position[1]+r[1],o.position[2]];break;case 2:h=[o.position[0],o.position[1],o.position[2]+r[2]]}if(t.putItem(s,h)){n=!0;break t}}if(!n){for(;null!==i;)if(i=this.getBiggerBinThan(t),i&&(i.items.push(s),0===this.packToBin(i,i.items).length)){t=i,n=!0;break}n||h.push(s)}}return h}pack(){for(this.bins.sort(((t,e)=>t.getVolume()-e.getVolume())),this.items.sort(((t,e)=>e.getVolume()-t.getVolume()));this.items.length>0;){let t=this.findFittedBin(this.items[0]);null!==t?this.items=this.packToBin(t,this.items):this.unfitItem()}return null}}return e}()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,